/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* inputmask.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2018 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.2\n*/\n\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(6), __webpack_require__(1), __webpack_require__(2) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require(\"./dependencyLibs/inputmask.dependencyLib\"), require(\"./global/window\"), require(\"./global/document\"));\n    } else {\n        window.Inputmask = factory(window.dependencyLib || jQuery, window, document);\n    }\n})(function($, window, document, undefined) {\n    var ua = navigator.userAgent, mobile = isInputEventSupported(\"touchstart\"), iemobile = /iemobile/i.test(ua), iphone = /iphone/i.test(ua) && !iemobile;\n    function Inputmask(alias, options, internal) {\n        if (!(this instanceof Inputmask)) {\n            return new Inputmask(alias, options, internal);\n        }\n        this.el = undefined;\n        this.events = {};\n        this.maskset = undefined;\n        this.refreshValue = false;\n        if (internal !== true) {\n            if ($.isPlainObject(alias)) {\n                options = alias;\n            } else {\n                options = options || {};\n                if (alias) options.alias = alias;\n            }\n            this.opts = $.extend(true, {}, this.defaults, options);\n            this.noMasksCache = options && options.definitions !== undefined;\n            this.userOptions = options || {};\n            this.isRTL = this.opts.numericInput;\n            resolveAlias(this.opts.alias, options, this.opts);\n        }\n    }\n    Inputmask.prototype = {\n        dataAttribute: \"data-inputmask\",\n        defaults: {\n            placeholder: \"_\",\n            optionalmarker: [ \"[\", \"]\" ],\n            quantifiermarker: [ \"{\", \"}\" ],\n            groupmarker: [ \"(\", \")\" ],\n            alternatormarker: \"|\",\n            escapeChar: \"\\\\\",\n            mask: null,\n            regex: null,\n            oncomplete: $.noop,\n            onincomplete: $.noop,\n            oncleared: $.noop,\n            repeat: 0,\n            greedy: false,\n            autoUnmask: false,\n            removeMaskOnSubmit: false,\n            clearMaskOnLostFocus: true,\n            insertMode: true,\n            clearIncomplete: false,\n            alias: null,\n            onKeyDown: $.noop,\n            onBeforeMask: null,\n            onBeforePaste: function(pastedValue, opts) {\n                return $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;\n            },\n            onBeforeWrite: null,\n            onUnMask: null,\n            showMaskOnFocus: true,\n            showMaskOnHover: true,\n            onKeyValidation: $.noop,\n            skipOptionalPartCharacter: \" \",\n            numericInput: false,\n            rightAlign: false,\n            undoOnEscape: true,\n            radixPoint: \"\",\n            _radixDance: false,\n            groupSeparator: \"\",\n            keepStatic: null,\n            positionCaretOnTab: true,\n            tabThrough: false,\n            supportsInputType: [ \"text\", \"tel\", \"password\", \"search\" ],\n            ignorables: [ 8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229 ],\n            isComplete: null,\n            preValidation: null,\n            postValidation: null,\n            staticDefinitionSymbol: undefined,\n            jitMasking: false,\n            nullable: true,\n            inputEventOnly: false,\n            noValuePatching: false,\n            positionCaretOnClick: \"lvp\",\n            casing: null,\n            inputmode: \"verbatim\",\n            colorMask: false,\n            disablePredictiveText: false,\n            importDataAttributes: true\n        },\n        definitions: {\n            9: {\n                validator: \"[0-9\\uff11-\\uff19]\",\n                definitionSymbol: \"*\"\n            },\n            a: {\n                validator: \"[A-Za-z\\u0410-\\u044f\\u0401\\u0451\\xc0-\\xff\\xb5]\",\n                definitionSymbol: \"*\"\n            },\n            \"*\": {\n                validator: \"[0-9\\uff11-\\uff19A-Za-z\\u0410-\\u044f\\u0401\\u0451\\xc0-\\xff\\xb5]\"\n            }\n        },\n        aliases: {},\n        masksCache: {},\n        mask: function(elems) {\n            var that = this;\n            function importAttributeOptions(npt, opts, userOptions, dataAttribute) {\n                if (opts.importDataAttributes === true) {\n                    var attrOptions = npt.getAttribute(dataAttribute), option, dataoptions, optionData, p;\n                    function importOption(option, optionData) {\n                        optionData = optionData !== undefined ? optionData : npt.getAttribute(dataAttribute + \"-\" + option);\n                        if (optionData !== null) {\n                            if (typeof optionData === \"string\") {\n                                if (option.indexOf(\"on\") === 0) optionData = window[optionData]; else if (optionData === \"false\") optionData = false; else if (optionData === \"true\") optionData = true;\n                            }\n                            userOptions[option] = optionData;\n                        }\n                    }\n                    if (attrOptions && attrOptions !== \"\") {\n                        attrOptions = attrOptions.replace(/'/g, '\"');\n                        dataoptions = JSON.parse(\"{\" + attrOptions + \"}\");\n                    }\n                    if (dataoptions) {\n                        optionData = undefined;\n                        for (p in dataoptions) {\n                            if (p.toLowerCase() === \"alias\") {\n                                optionData = dataoptions[p];\n                                break;\n                            }\n                        }\n                    }\n                    importOption(\"alias\", optionData);\n                    if (userOptions.alias) {\n                        resolveAlias(userOptions.alias, userOptions, opts);\n                    }\n                    for (option in opts) {\n                        if (dataoptions) {\n                            optionData = undefined;\n                            for (p in dataoptions) {\n                                if (p.toLowerCase() === option.toLowerCase()) {\n                                    optionData = dataoptions[p];\n                                    break;\n                                }\n                            }\n                        }\n                        importOption(option, optionData);\n                    }\n                }\n                $.extend(true, opts, userOptions);\n                if (npt.dir === \"rtl\" || opts.rightAlign) {\n                    npt.style.textAlign = \"right\";\n                }\n                if (npt.dir === \"rtl\" || opts.numericInput) {\n                    npt.dir = \"ltr\";\n                    npt.removeAttribute(\"dir\");\n                    opts.isRTL = true;\n                }\n                return Object.keys(userOptions).length;\n            }\n            if (typeof elems === \"string\") {\n                elems = document.getElementById(elems) || document.querySelectorAll(elems);\n            }\n            elems = elems.nodeName ? [ elems ] : elems;\n            $.each(elems, function(ndx, el) {\n                var scopedOpts = $.extend(true, {}, that.opts);\n                if (importAttributeOptions(el, scopedOpts, $.extend(true, {}, that.userOptions), that.dataAttribute)) {\n                    var maskset = generateMaskSet(scopedOpts, that.noMasksCache);\n                    if (maskset !== undefined) {\n                        if (el.inputmask !== undefined) {\n                            el.inputmask.opts.autoUnmask = true;\n                            el.inputmask.remove();\n                        }\n                        el.inputmask = new Inputmask(undefined, undefined, true);\n                        el.inputmask.opts = scopedOpts;\n                        el.inputmask.noMasksCache = that.noMasksCache;\n                        el.inputmask.userOptions = $.extend(true, {}, that.userOptions);\n                        el.inputmask.isRTL = scopedOpts.isRTL || scopedOpts.numericInput;\n                        el.inputmask.el = el;\n                        el.inputmask.maskset = maskset;\n                        $.data(el, \"_inputmask_opts\", scopedOpts);\n                        maskScope.call(el.inputmask, {\n                            action: \"mask\"\n                        });\n                    }\n                }\n            });\n            return elems && elems[0] ? elems[0].inputmask || this : this;\n        },\n        option: function(options, noremask) {\n            if (typeof options === \"string\") {\n                return this.opts[options];\n            } else if (typeof options === \"object\") {\n                $.extend(this.userOptions, options);\n                if (this.el && noremask !== true) {\n                    this.mask(this.el);\n                }\n                return this;\n            }\n        },\n        unmaskedvalue: function(value) {\n            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n            return maskScope.call(this, {\n                action: \"unmaskedvalue\",\n                value: value\n            });\n        },\n        remove: function() {\n            return maskScope.call(this, {\n                action: \"remove\"\n            });\n        },\n        getemptymask: function() {\n            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n            return maskScope.call(this, {\n                action: \"getemptymask\"\n            });\n        },\n        hasMaskedValue: function() {\n            return !this.opts.autoUnmask;\n        },\n        isComplete: function() {\n            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n            return maskScope.call(this, {\n                action: \"isComplete\"\n            });\n        },\n        getmetadata: function() {\n            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n            return maskScope.call(this, {\n                action: \"getmetadata\"\n            });\n        },\n        isValid: function(value) {\n            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n            return maskScope.call(this, {\n                action: \"isValid\",\n                value: value\n            });\n        },\n        format: function(value, metadata) {\n            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n            return maskScope.call(this, {\n                action: \"format\",\n                value: value,\n                metadata: metadata\n            });\n        },\n        setValue: function(value) {\n            if (this.el) {\n                $(this.el).trigger(\"setvalue\", [ value ]);\n            }\n        },\n        analyseMask: function(mask, regexMask, opts) {\n            var tokenizer = /(?:[?*+]|\\{[0-9\\+\\*]+(?:,[0-9\\+\\*]*)?(?:\\|[0-9\\+\\*]*)?\\})|[^.?*+^${[]()|\\\\]+|./g, regexTokenizer = /\\[\\^?]?(?:[^\\\\\\]]+|\\\\[\\S\\s]?)*]?|\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\\S\\s]?)|\\((?:\\?[:=!]?)?|(?:[?*+]|\\{[0-9]+(?:,[0-9]*)?\\})\\??|[^.?*+^${[()|\\\\]+|./g, escaped = false, currentToken = new MaskToken(), match, m, openenings = [], maskTokens = [], openingToken, currentOpeningToken, alternator, lastMatch, groupToken;\n            function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {\n                this.matches = [];\n                this.openGroup = isGroup || false;\n                this.alternatorGroup = false;\n                this.isGroup = isGroup || false;\n                this.isOptional = isOptional || false;\n                this.isQuantifier = isQuantifier || false;\n                this.isAlternator = isAlternator || false;\n                this.quantifier = {\n                    min: 1,\n                    max: 1\n                };\n            }\n            function insertTestDefinition(mtoken, element, position) {\n                position = position !== undefined ? position : mtoken.matches.length;\n                var prevMatch = mtoken.matches[position - 1];\n                if (regexMask) {\n                    if (element.indexOf(\"[\") === 0 || escaped && /\\\\d|\\\\s|\\\\w]/i.test(element) || element === \".\") {\n                        mtoken.matches.splice(position++, 0, {\n                            fn: new RegExp(element, opts.casing ? \"i\" : \"\"),\n                            optionality: false,\n                            newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== element,\n                            casing: null,\n                            def: element,\n                            placeholder: undefined,\n                            nativeDef: element\n                        });\n                    } else {\n                        if (escaped) element = element[element.length - 1];\n                        $.each(element.split(\"\"), function(ndx, lmnt) {\n                            prevMatch = mtoken.matches[position - 1];\n                            mtoken.matches.splice(position++, 0, {\n                                fn: null,\n                                optionality: false,\n                                newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== lmnt && prevMatch.fn !== null,\n                                casing: null,\n                                def: opts.staticDefinitionSymbol || lmnt,\n                                placeholder: opts.staticDefinitionSymbol !== undefined ? lmnt : undefined,\n                                nativeDef: (escaped ? \"'\" : \"\") + lmnt\n                            });\n                        });\n                    }\n                    escaped = false;\n                } else {\n                    var maskdef = (opts.definitions ? opts.definitions[element] : undefined) || Inputmask.prototype.definitions[element];\n                    if (maskdef && !escaped) {\n                        mtoken.matches.splice(position++, 0, {\n                            fn: maskdef.validator ? typeof maskdef.validator == \"string\" ? new RegExp(maskdef.validator, opts.casing ? \"i\" : \"\") : new function() {\n                                this.test = maskdef.validator;\n                            }() : new RegExp(\".\"),\n                            optionality: false,\n                            newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== (maskdef.definitionSymbol || element),\n                            casing: maskdef.casing,\n                            def: maskdef.definitionSymbol || element,\n                            placeholder: maskdef.placeholder,\n                            nativeDef: element\n                        });\n                    } else {\n                        mtoken.matches.splice(position++, 0, {\n                            fn: null,\n                            optionality: false,\n                            newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== element && prevMatch.fn !== null,\n                            casing: null,\n                            def: opts.staticDefinitionSymbol || element,\n                            placeholder: opts.staticDefinitionSymbol !== undefined ? element : undefined,\n                            nativeDef: (escaped ? \"'\" : \"\") + element\n                        });\n                        escaped = false;\n                    }\n                }\n            }\n            function verifyGroupMarker(maskToken) {\n                if (maskToken && maskToken.matches) {\n                    $.each(maskToken.matches, function(ndx, token) {\n                        var nextToken = maskToken.matches[ndx + 1];\n                        if ((nextToken === undefined || (nextToken.matches === undefined || nextToken.isQuantifier === false)) && token && token.isGroup) {\n                            token.isGroup = false;\n                            if (!regexMask) {\n                                insertTestDefinition(token, opts.groupmarker[0], 0);\n                                if (token.openGroup !== true) {\n                                    insertTestDefinition(token, opts.groupmarker[1]);\n                                }\n                            }\n                        }\n                        verifyGroupMarker(token);\n                    });\n                }\n            }\n            function defaultCase() {\n                if (openenings.length > 0) {\n                    currentOpeningToken = openenings[openenings.length - 1];\n                    insertTestDefinition(currentOpeningToken, m);\n                    if (currentOpeningToken.isAlternator) {\n                        alternator = openenings.pop();\n                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n                            if (alternator.matches[mndx].isGroup) alternator.matches[mndx].isGroup = false;\n                        }\n                        if (openenings.length > 0) {\n                            currentOpeningToken = openenings[openenings.length - 1];\n                            currentOpeningToken.matches.push(alternator);\n                        } else {\n                            currentToken.matches.push(alternator);\n                        }\n                    }\n                } else {\n                    insertTestDefinition(currentToken, m);\n                }\n            }\n            function reverseTokens(maskToken) {\n                function reverseStatic(st) {\n                    if (st === opts.optionalmarker[0]) st = opts.optionalmarker[1]; else if (st === opts.optionalmarker[1]) st = opts.optionalmarker[0]; else if (st === opts.groupmarker[0]) st = opts.groupmarker[1]; else if (st === opts.groupmarker[1]) st = opts.groupmarker[0];\n                    return st;\n                }\n                maskToken.matches = maskToken.matches.reverse();\n                for (var match in maskToken.matches) {\n                    if (maskToken.matches.hasOwnProperty(match)) {\n                        var intMatch = parseInt(match);\n                        if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {\n                            var qt = maskToken.matches[match];\n                            maskToken.matches.splice(match, 1);\n                            maskToken.matches.splice(intMatch + 1, 0, qt);\n                        }\n                        if (maskToken.matches[match].matches !== undefined) {\n                            maskToken.matches[match] = reverseTokens(maskToken.matches[match]);\n                        } else {\n                            maskToken.matches[match] = reverseStatic(maskToken.matches[match]);\n                        }\n                    }\n                }\n                return maskToken;\n            }\n            function groupify(matches) {\n                var groupToken = new MaskToken(true);\n                groupToken.openGroup = false;\n                groupToken.matches = matches;\n                return groupToken;\n            }\n            if (regexMask) {\n                opts.optionalmarker[0] = undefined;\n                opts.optionalmarker[1] = undefined;\n            }\n            while (match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask)) {\n                m = match[0];\n                if (regexMask) {\n                    switch (m.charAt(0)) {\n                      case \"?\":\n                        m = \"{0,1}\";\n                        break;\n\n                      case \"+\":\n                      case \"*\":\n                        m = \"{\" + m + \"}\";\n                        break;\n                    }\n                }\n                if (escaped) {\n                    defaultCase();\n                    continue;\n                }\n                switch (m.charAt(0)) {\n                  case \"(?=\":\n                    break;\n\n                  case \"(?!\":\n                    break;\n\n                  case \"(?<=\":\n                    break;\n\n                  case \"(?<!\":\n                    break;\n\n                  case opts.escapeChar:\n                    escaped = true;\n                    if (regexMask) {\n                        defaultCase();\n                    }\n                    break;\n\n                  case opts.optionalmarker[1]:\n                  case opts.groupmarker[1]:\n                    openingToken = openenings.pop();\n                    openingToken.openGroup = false;\n                    if (openingToken !== undefined) {\n                        if (openenings.length > 0) {\n                            currentOpeningToken = openenings[openenings.length - 1];\n                            currentOpeningToken.matches.push(openingToken);\n                            if (currentOpeningToken.isAlternator) {\n                                alternator = openenings.pop();\n                                for (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n                                    alternator.matches[mndx].isGroup = false;\n                                    alternator.matches[mndx].alternatorGroup = false;\n                                }\n                                if (openenings.length > 0) {\n                                    currentOpeningToken = openenings[openenings.length - 1];\n                                    currentOpeningToken.matches.push(alternator);\n                                } else {\n                                    currentToken.matches.push(alternator);\n                                }\n                            }\n                        } else {\n                            currentToken.matches.push(openingToken);\n                        }\n                    } else defaultCase();\n                    break;\n\n                  case opts.optionalmarker[0]:\n                    openenings.push(new MaskToken(false, true));\n                    break;\n\n                  case opts.groupmarker[0]:\n                    openenings.push(new MaskToken(true));\n                    break;\n\n                  case opts.quantifiermarker[0]:\n                    var quantifier = new MaskToken(false, false, true);\n                    m = m.replace(/[{}]/g, \"\");\n                    var mqj = m.split(\"|\"), mq = mqj[0].split(\",\"), mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]), mq1 = mq.length === 1 ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);\n                    if (mq0 === \"*\" || mq0 === \"+\") {\n                        mq0 = mq1 === \"*\" ? 0 : 1;\n                    }\n                    quantifier.quantifier = {\n                        min: mq0,\n                        max: mq1,\n                        jit: mqj[1]\n                    };\n                    var matches = openenings.length > 0 ? openenings[openenings.length - 1].matches : currentToken.matches;\n                    match = matches.pop();\n                    if (match.isAlternator) {\n                        matches.push(match);\n                        matches = match.matches;\n                        var groupToken = new MaskToken(true);\n                        var tmpMatch = matches.pop();\n                        matches.push(groupToken);\n                        matches = groupToken.matches;\n                        match = tmpMatch;\n                    }\n                    if (!match.isGroup) {\n                        match = groupify([ match ]);\n                    }\n                    matches.push(match);\n                    matches.push(quantifier);\n                    break;\n\n                  case opts.alternatormarker:\n                    function groupQuantifier(matches) {\n                        var lastMatch = matches.pop();\n                        if (lastMatch.isQuantifier) {\n                            lastMatch = groupify([ matches.pop(), lastMatch ]);\n                        }\n                        return lastMatch;\n                    }\n                    if (openenings.length > 0) {\n                        currentOpeningToken = openenings[openenings.length - 1];\n                        var subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];\n                        if (currentOpeningToken.openGroup && (subToken.matches === undefined || subToken.isGroup === false && subToken.isAlternator === false)) {\n                            lastMatch = openenings.pop();\n                        } else {\n                            lastMatch = groupQuantifier(currentOpeningToken.matches);\n                        }\n                    } else {\n                        lastMatch = groupQuantifier(currentToken.matches);\n                    }\n                    if (lastMatch.isAlternator) {\n                        openenings.push(lastMatch);\n                    } else {\n                        if (lastMatch.alternatorGroup) {\n                            alternator = openenings.pop();\n                            lastMatch.alternatorGroup = false;\n                        } else {\n                            alternator = new MaskToken(false, false, false, true);\n                        }\n                        alternator.matches.push(lastMatch);\n                        openenings.push(alternator);\n                        if (lastMatch.openGroup) {\n                            lastMatch.openGroup = false;\n                            var alternatorGroup = new MaskToken(true);\n                            alternatorGroup.alternatorGroup = true;\n                            openenings.push(alternatorGroup);\n                        }\n                    }\n                    break;\n\n                  default:\n                    defaultCase();\n                }\n            }\n            while (openenings.length > 0) {\n                openingToken = openenings.pop();\n                currentToken.matches.push(openingToken);\n            }\n            if (currentToken.matches.length > 0) {\n                verifyGroupMarker(currentToken);\n                maskTokens.push(currentToken);\n            }\n            if (opts.numericInput || opts.isRTL) {\n                reverseTokens(maskTokens[0]);\n            }\n            return maskTokens;\n        }\n    };\n    Inputmask.extendDefaults = function(options) {\n        $.extend(true, Inputmask.prototype.defaults, options);\n    };\n    Inputmask.extendDefinitions = function(definition) {\n        $.extend(true, Inputmask.prototype.definitions, definition);\n    };\n    Inputmask.extendAliases = function(alias) {\n        $.extend(true, Inputmask.prototype.aliases, alias);\n    };\n    Inputmask.format = function(value, options, metadata) {\n        return Inputmask(options).format(value, metadata);\n    };\n    Inputmask.unmask = function(value, options) {\n        return Inputmask(options).unmaskedvalue(value);\n    };\n    Inputmask.isValid = function(value, options) {\n        return Inputmask(options).isValid(value);\n    };\n    Inputmask.remove = function(elems) {\n        if (typeof elems === \"string\") {\n            elems = document.getElementById(elems) || document.querySelectorAll(elems);\n        }\n        elems = elems.nodeName ? [ elems ] : elems;\n        $.each(elems, function(ndx, el) {\n            if (el.inputmask) el.inputmask.remove();\n        });\n    };\n    Inputmask.setValue = function(elems, value) {\n        if (typeof elems === \"string\") {\n            elems = document.getElementById(elems) || document.querySelectorAll(elems);\n        }\n        elems = elems.nodeName ? [ elems ] : elems;\n        $.each(elems, function(ndx, el) {\n            if (el.inputmask) el.inputmask.setValue(value); else $(el).trigger(\"setvalue\", [ value ]);\n        });\n    };\n    Inputmask.escapeRegex = function(str) {\n        var specials = [ \"/\", \".\", \"*\", \"+\", \"?\", \"|\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"\\\\\", \"$\", \"^\" ];\n        return str.replace(new RegExp(\"(\\\\\" + specials.join(\"|\\\\\") + \")\", \"gim\"), \"\\\\$1\");\n    };\n    Inputmask.keyCode = {\n        BACKSPACE: 8,\n        BACKSPACE_SAFARI: 127,\n        DELETE: 46,\n        DOWN: 40,\n        END: 35,\n        ENTER: 13,\n        ESCAPE: 27,\n        HOME: 36,\n        INSERT: 45,\n        LEFT: 37,\n        PAGE_DOWN: 34,\n        PAGE_UP: 33,\n        RIGHT: 39,\n        SPACE: 32,\n        TAB: 9,\n        UP: 38,\n        X: 88,\n        CONTROL: 17\n    };\n    Inputmask.dependencyLib = $;\n    function resolveAlias(aliasStr, options, opts) {\n        var aliasDefinition = Inputmask.prototype.aliases[aliasStr];\n        if (aliasDefinition) {\n            if (aliasDefinition.alias) resolveAlias(aliasDefinition.alias, undefined, opts);\n            $.extend(true, opts, aliasDefinition);\n            $.extend(true, opts, options);\n            return true;\n        } else if (opts.mask === null) {\n            opts.mask = aliasStr;\n        }\n        return false;\n    }\n    function generateMaskSet(opts, nocache) {\n        function generateMask(mask, metadata, opts) {\n            var regexMask = false;\n            if (mask === null || mask === \"\") {\n                regexMask = opts.regex !== null;\n                if (regexMask) {\n                    mask = opts.regex;\n                    mask = mask.replace(/^(\\^)(.*)(\\$)$/, \"$2\");\n                } else {\n                    regexMask = true;\n                    mask = \".*\";\n                }\n            }\n            if (mask.length === 1 && opts.greedy === false && opts.repeat !== 0) {\n                opts.placeholder = \"\";\n            }\n            if (opts.repeat > 0 || opts.repeat === \"*\" || opts.repeat === \"+\") {\n                var repeatStart = opts.repeat === \"*\" ? 0 : opts.repeat === \"+\" ? 1 : opts.repeat;\n                mask = opts.groupmarker[0] + mask + opts.groupmarker[1] + opts.quantifiermarker[0] + repeatStart + \",\" + opts.repeat + opts.quantifiermarker[1];\n            }\n            var masksetDefinition, maskdefKey = regexMask ? \"regex_\" + opts.regex : opts.numericInput ? mask.split(\"\").reverse().join(\"\") : mask;\n            if (Inputmask.prototype.masksCache[maskdefKey] === undefined || nocache === true) {\n                masksetDefinition = {\n                    mask: mask,\n                    maskToken: Inputmask.prototype.analyseMask(mask, regexMask, opts),\n                    validPositions: {},\n                    _buffer: undefined,\n                    buffer: undefined,\n                    tests: {},\n                    excludes: {},\n                    metadata: metadata,\n                    maskLength: undefined\n                };\n                if (nocache !== true) {\n                    Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition;\n                    masksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);\n                }\n            } else masksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);\n            return masksetDefinition;\n        }\n        var ms;\n        if ($.isFunction(opts.mask)) {\n            opts.mask = opts.mask(opts);\n        }\n        if ($.isArray(opts.mask)) {\n            if (opts.mask.length > 1) {\n                if (opts.keepStatic === null) {\n                    opts.keepStatic = \"auto\";\n                    for (var i = 0; i < opts.mask.length; i++) {\n                        if (opts.mask[i].charAt(0) !== opts.mask[0].charAt(0)) {\n                            opts.keepStatic = true;\n                            break;\n                        }\n                    }\n                }\n                var altMask = opts.groupmarker[0];\n                $.each(opts.isRTL ? opts.mask.reverse() : opts.mask, function(ndx, msk) {\n                    if (altMask.length > 1) {\n                        altMask += opts.groupmarker[1] + opts.alternatormarker + opts.groupmarker[0];\n                    }\n                    if (msk.mask !== undefined && !$.isFunction(msk.mask)) {\n                        altMask += msk.mask;\n                    } else {\n                        altMask += msk;\n                    }\n                });\n                altMask += opts.groupmarker[1];\n                return generateMask(altMask, opts.mask, opts);\n            } else opts.mask = opts.mask.pop();\n        }\n        if (opts.mask && opts.mask.mask !== undefined && !$.isFunction(opts.mask.mask)) {\n            ms = generateMask(opts.mask.mask, opts.mask, opts);\n        } else {\n            ms = generateMask(opts.mask, opts.mask, opts);\n        }\n        return ms;\n    }\n    function isInputEventSupported(eventName) {\n        var el = document.createElement(\"input\"), evName = \"on\" + eventName, isSupported = evName in el;\n        if (!isSupported) {\n            el.setAttribute(evName, \"return;\");\n            isSupported = typeof el[evName] === \"function\";\n        }\n        el = null;\n        return isSupported;\n    }\n    function maskScope(actionObj, maskset, opts) {\n        maskset = maskset || this.maskset;\n        opts = opts || this.opts;\n        var inputmask = this, el = this.el, isRTL = this.isRTL, undoValue, $el, skipKeyPressEvent = false, skipInputEvent = false, ignorable = false, maxLength, mouseEnter = false, colorMask, originalPlaceholder;\n        function getMaskTemplate(baseOnInput, minimalPos, includeMode, noJit, clearOptionalTail) {\n            var greedy = opts.greedy;\n            if (clearOptionalTail) opts.greedy = false;\n            minimalPos = minimalPos || 0;\n            var maskTemplate = [], ndxIntlzr, pos = 0, test, testPos, lvp = getLastValidPosition();\n            do {\n                if (baseOnInput === true && getMaskSet().validPositions[pos]) {\n                    testPos = clearOptionalTail && getMaskSet().validPositions[pos].match.optionality === true && getMaskSet().validPositions[pos + 1] === undefined && (getMaskSet().validPositions[pos].generatedInput === true || getMaskSet().validPositions[pos].input == opts.skipOptionalPartCharacter && pos > 0) ? determineTestTemplate(pos, getTests(pos, ndxIntlzr, pos - 1)) : getMaskSet().validPositions[pos];\n                    test = testPos.match;\n                    ndxIntlzr = testPos.locator.slice();\n                    maskTemplate.push(includeMode === true ? testPos.input : includeMode === false ? test.nativeDef : getPlaceholder(pos, test));\n                } else {\n                    testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);\n                    test = testPos.match;\n                    ndxIntlzr = testPos.locator.slice();\n                    var jitMasking = noJit === true ? false : opts.jitMasking !== false ? opts.jitMasking : test.jit;\n                    if (jitMasking === false || jitMasking === undefined || typeof jitMasking === \"number\" && isFinite(jitMasking) && jitMasking > pos) {\n                        maskTemplate.push(includeMode === false ? test.nativeDef : getPlaceholder(pos, test));\n                    }\n                }\n                if (opts.keepStatic === \"auto\") {\n                    if (test.newBlockMarker && test.fn !== null) {\n                        opts.keepStatic = pos - 1;\n                    }\n                }\n                pos++;\n            } while ((maxLength === undefined || pos < maxLength) && (test.fn !== null || test.def !== \"\") || minimalPos > pos);\n            if (maskTemplate[maskTemplate.length - 1] === \"\") {\n                maskTemplate.pop();\n            }\n            if (includeMode !== false || getMaskSet().maskLength === undefined) getMaskSet().maskLength = pos - 1;\n            opts.greedy = greedy;\n            return maskTemplate;\n        }\n        function getMaskSet() {\n            return maskset;\n        }\n        function resetMaskSet(soft) {\n            var maskset = getMaskSet();\n            maskset.buffer = undefined;\n            if (soft !== true) {\n                maskset.validPositions = {};\n                maskset.p = 0;\n            }\n        }\n        function getLastValidPosition(closestTo, strict, validPositions) {\n            var before = -1, after = -1, valids = validPositions || getMaskSet().validPositions;\n            if (closestTo === undefined) closestTo = -1;\n            for (var posNdx in valids) {\n                var psNdx = parseInt(posNdx);\n                if (valids[psNdx] && (strict || valids[psNdx].generatedInput !== true)) {\n                    if (psNdx <= closestTo) before = psNdx;\n                    if (psNdx >= closestTo) after = psNdx;\n                }\n            }\n            return before === -1 || before == closestTo ? after : after == -1 ? before : closestTo - before < after - closestTo ? before : after;\n        }\n        function getDecisionTaker(tst) {\n            var decisionTaker = tst.locator[tst.alternation];\n            if (typeof decisionTaker == \"string\" && decisionTaker.length > 0) {\n                decisionTaker = decisionTaker.split(\",\")[0];\n            }\n            return decisionTaker !== undefined ? decisionTaker.toString() : \"\";\n        }\n        function getLocator(tst, align) {\n            var locator = (tst.alternation != undefined ? tst.mloc[getDecisionTaker(tst)] : tst.locator).join(\"\");\n            if (locator !== \"\") while (locator.length < align) locator += \"0\";\n            return locator;\n        }\n        function determineTestTemplate(pos, tests) {\n            pos = pos > 0 ? pos - 1 : 0;\n            var altTest = getTest(pos), targetLocator = getLocator(altTest), tstLocator, closest, bestMatch;\n            for (var ndx = 0; ndx < tests.length; ndx++) {\n                var tst = tests[ndx];\n                tstLocator = getLocator(tst, targetLocator.length);\n                var distance = Math.abs(tstLocator - targetLocator);\n                if (closest === undefined || tstLocator !== \"\" && distance < closest || bestMatch && bestMatch.match.optionality && bestMatch.match.newBlockMarker === \"master\" && (!tst.match.optionality || !tst.match.newBlockMarker) || bestMatch && bestMatch.match.optionalQuantifier && !tst.match.optionalQuantifier) {\n                    closest = distance;\n                    bestMatch = tst;\n                }\n            }\n            return bestMatch;\n        }\n        function getTestTemplate(pos, ndxIntlzr, tstPs) {\n            return getMaskSet().validPositions[pos] || determineTestTemplate(pos, getTests(pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));\n        }\n        function getTest(pos, tests) {\n            if (getMaskSet().validPositions[pos]) {\n                return getMaskSet().validPositions[pos];\n            }\n            return (tests || getTests(pos))[0];\n        }\n        function positionCanMatchDefinition(pos, def) {\n            var valid = false, tests = getTests(pos);\n            for (var tndx = 0; tndx < tests.length; tndx++) {\n                if (tests[tndx].match && tests[tndx].match.def === def) {\n                    valid = true;\n                    break;\n                }\n            }\n            return valid;\n        }\n        function getTests(pos, ndxIntlzr, tstPs) {\n            var maskTokens = getMaskSet().maskToken, testPos = ndxIntlzr ? tstPs : 0, ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [ 0 ], matches = [], insertStop = false, latestMatch, cacheDependency = ndxIntlzr ? ndxIntlzr.join(\"\") : \"\", offset = 0;\n            function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {\n                function handleMatch(match, loopNdx, quantifierRecurse) {\n                    function isFirstMatch(latestMatch, tokenGroup) {\n                        var firstMatch = $.inArray(latestMatch, tokenGroup.matches) === 0;\n                        if (!firstMatch) {\n                            $.each(tokenGroup.matches, function(ndx, match) {\n                                if (match.isQuantifier === true) firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]); else if (match.hasOwnProperty(\"matches\")) firstMatch = isFirstMatch(latestMatch, match);\n                                if (firstMatch) return false;\n                            });\n                        }\n                        return firstMatch;\n                    }\n                    function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {\n                        var bestMatch, indexPos;\n                        if (getMaskSet().tests[pos] || getMaskSet().validPositions[pos]) {\n                            $.each(getMaskSet().tests[pos] || [ getMaskSet().validPositions[pos] ], function(ndx, lmnt) {\n                                if (lmnt.mloc[alternateNdx]) {\n                                    bestMatch = lmnt;\n                                    return false;\n                                }\n                                var alternation = targetAlternation !== undefined ? targetAlternation : lmnt.alternation, ndxPos = lmnt.locator[alternation] !== undefined ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;\n                                if ((indexPos === undefined || ndxPos < indexPos) && ndxPos !== -1) {\n                                    bestMatch = lmnt;\n                                    indexPos = ndxPos;\n                                }\n                            });\n                        }\n                        if (bestMatch) {\n                            var bestMatchAltIndex = bestMatch.locator[bestMatch.alternation];\n                            var locator = bestMatch.mloc[alternateNdx] || bestMatch.mloc[bestMatchAltIndex] || bestMatch.locator;\n                            return locator.slice((targetAlternation !== undefined ? targetAlternation : bestMatch.alternation) + 1);\n                        } else {\n                            return targetAlternation !== undefined ? resolveNdxInitializer(pos, alternateNdx) : undefined;\n                        }\n                    }\n                    function isSubsetOf(source, target) {\n                        function expand(pattern) {\n                            var expanded = [], start, end;\n                            for (var i = 0, l = pattern.length; i < l; i++) {\n                                if (pattern.charAt(i) === \"-\") {\n                                    end = pattern.charCodeAt(i + 1);\n                                    while (++start < end) expanded.push(String.fromCharCode(start));\n                                } else {\n                                    start = pattern.charCodeAt(i);\n                                    expanded.push(pattern.charAt(i));\n                                }\n                            }\n                            return expanded.join(\"\");\n                        }\n                        if (opts.regex && source.match.fn !== null && target.match.fn !== null) {\n                            return expand(target.match.def.replace(/[\\[\\]]/g, \"\")).indexOf(expand(source.match.def.replace(/[\\[\\]]/g, \"\"))) !== -1;\n                        }\n                        return source.match.def === target.match.nativeDef;\n                    }\n                    function staticCanMatchDefinition(source, target) {\n                        var sloc = source.locator.slice(source.alternation).join(\"\"), tloc = target.locator.slice(target.alternation).join(\"\"), canMatch = sloc == tloc, canMatch = canMatch && source.match.fn === null && target.match.fn !== null ? target.match.fn.test(source.match.def, getMaskSet(), pos, false, opts, false) : false;\n                        return canMatch;\n                    }\n                    function setMergeLocators(targetMatch, altMatch) {\n                        if (altMatch === undefined || targetMatch.alternation === altMatch.alternation && targetMatch.locator[targetMatch.alternation].toString().indexOf(altMatch.locator[altMatch.alternation]) === -1) {\n                            targetMatch.mloc = targetMatch.mloc || {};\n                            var locNdx = targetMatch.locator[targetMatch.alternation];\n                            if (locNdx === undefined) targetMatch.alternation = undefined; else {\n                                if (typeof locNdx === \"string\") locNdx = locNdx.split(\",\")[0];\n                                if (targetMatch.mloc[locNdx] === undefined) targetMatch.mloc[locNdx] = targetMatch.locator.slice();\n                                if (altMatch !== undefined) {\n                                    for (var ndx in altMatch.mloc) {\n                                        if (typeof ndx === \"string\") ndx = ndx.split(\",\")[0];\n                                        if (targetMatch.mloc[ndx] === undefined) targetMatch.mloc[ndx] = altMatch.mloc[ndx];\n                                    }\n                                    targetMatch.locator[targetMatch.alternation] = Object.keys(targetMatch.mloc).join(\",\");\n                                }\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                    if (testPos > 500 && quantifierRecurse !== undefined) {\n                        throw \"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. \" + getMaskSet().mask;\n                    }\n                    if (testPos === pos && match.matches === undefined) {\n                        matches.push({\n                            match: match,\n                            locator: loopNdx.reverse(),\n                            cd: cacheDependency,\n                            mloc: {}\n                        });\n                        return true;\n                    } else if (match.matches !== undefined) {\n                        if (match.isGroup && quantifierRecurse !== match) {\n                            match = handleMatch(maskToken.matches[$.inArray(match, maskToken.matches) + 1], loopNdx, quantifierRecurse);\n                            if (match) return true;\n                        } else if (match.isOptional) {\n                            var optionalToken = match;\n                            match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);\n                            if (match) {\n                                $.each(matches, function(ndx, mtch) {\n                                    mtch.match.optionality = true;\n                                });\n                                latestMatch = matches[matches.length - 1].match;\n                                if (quantifierRecurse === undefined && isFirstMatch(latestMatch, optionalToken)) {\n                                    insertStop = true;\n                                    testPos = pos;\n                                } else return true;\n                            }\n                        } else if (match.isAlternator) {\n                            var alternateToken = match, malternateMatches = [], maltMatches, currentMatches = matches.slice(), loopNdxCnt = loopNdx.length;\n                            var altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;\n                            if (altIndex === -1 || typeof altIndex === \"string\") {\n                                var currentPos = testPos, ndxInitializerClone = ndxInitializer.slice(), altIndexArr = [], amndx;\n                                if (typeof altIndex == \"string\") {\n                                    altIndexArr = altIndex.split(\",\");\n                                } else {\n                                    for (amndx = 0; amndx < alternateToken.matches.length; amndx++) {\n                                        altIndexArr.push(amndx.toString());\n                                    }\n                                }\n                                if (getMaskSet().excludes[pos]) {\n                                    var altIndexArrClone = altIndexArr.slice();\n                                    for (var i = 0, el = getMaskSet().excludes[pos].length; i < el; i++) {\n                                        altIndexArr.splice(altIndexArr.indexOf(getMaskSet().excludes[pos][i].toString()), 1);\n                                    }\n                                    if (altIndexArr.length === 0) {\n                                        getMaskSet().excludes[pos] = undefined;\n                                        altIndexArr = altIndexArrClone;\n                                    }\n                                }\n                                if (opts.keepStatic === true || isFinite(parseInt(opts.keepStatic)) && currentPos >= opts.keepStatic) altIndexArr = altIndexArr.slice(0, 1);\n                                var unMatchedAlternation = false;\n                                for (var ndx = 0; ndx < altIndexArr.length; ndx++) {\n                                    amndx = parseInt(altIndexArr[ndx]);\n                                    matches = [];\n                                    ndxInitializer = typeof altIndex === \"string\" ? resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice() : ndxInitializerClone.slice();\n                                    if (alternateToken.matches[amndx] && handleMatch(alternateToken.matches[amndx], [ amndx ].concat(loopNdx), quantifierRecurse)) match = true; else if (ndx === 0) {\n                                        unMatchedAlternation = true;\n                                    }\n                                    maltMatches = matches.slice();\n                                    testPos = currentPos;\n                                    matches = [];\n                                    for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {\n                                        var altMatch = maltMatches[ndx1], dropMatch = false;\n                                        altMatch.match.jit = altMatch.match.jit || unMatchedAlternation;\n                                        altMatch.alternation = altMatch.alternation || loopNdxCnt;\n                                        setMergeLocators(altMatch);\n                                        for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {\n                                            var altMatch2 = malternateMatches[ndx2];\n                                            if (typeof altIndex !== \"string\" || altMatch.alternation !== undefined && $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr) !== -1) {\n                                                if (altMatch.match.nativeDef === altMatch2.match.nativeDef) {\n                                                    dropMatch = true;\n                                                    setMergeLocators(altMatch2, altMatch);\n                                                    break;\n                                                } else if (isSubsetOf(altMatch, altMatch2)) {\n                                                    if (setMergeLocators(altMatch, altMatch2)) {\n                                                        dropMatch = true;\n                                                        malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);\n                                                    }\n                                                    break;\n                                                } else if (isSubsetOf(altMatch2, altMatch)) {\n                                                    setMergeLocators(altMatch2, altMatch);\n                                                    break;\n                                                } else if (staticCanMatchDefinition(altMatch, altMatch2)) {\n                                                    if (setMergeLocators(altMatch, altMatch2)) {\n                                                        dropMatch = true;\n                                                        malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);\n                                                    }\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        if (!dropMatch) {\n                                            malternateMatches.push(altMatch);\n                                        }\n                                    }\n                                }\n                                matches = currentMatches.concat(malternateMatches);\n                                testPos = pos;\n                                insertStop = matches.length > 0;\n                                match = malternateMatches.length > 0;\n                                ndxInitializer = ndxInitializerClone.slice();\n                            } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [ altIndex ].concat(loopNdx), quantifierRecurse);\n                            if (match) return true;\n                        } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[$.inArray(match, maskToken.matches) - 1]) {\n                            var qt = match;\n                            for (var qndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {\n                                var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];\n                                match = handleMatch(tokenGroup, [ qndx ].concat(loopNdx), tokenGroup);\n                                if (match) {\n                                    latestMatch = matches[matches.length - 1].match;\n                                    latestMatch.optionalQuantifier = qndx > qt.quantifier.min - 1;\n                                    latestMatch.jit = (qndx || 1) * tokenGroup.matches.indexOf(latestMatch) >= qt.quantifier.jit;\n                                    if (latestMatch.optionalQuantifier && isFirstMatch(latestMatch, tokenGroup)) {\n                                        insertStop = true;\n                                        testPos = pos;\n                                        break;\n                                    }\n                                    if (latestMatch.jit && !latestMatch.optionalQuantifier) {\n                                        offset = tokenGroup.matches.indexOf(latestMatch);\n                                        testPos = pos;\n                                        insertStop = true;\n                                        break;\n                                    }\n                                    return true;\n                                }\n                            }\n                        } else {\n                            match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);\n                            if (match) return true;\n                        }\n                    } else {\n                        testPos++;\n                    }\n                }\n                for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx = tndx + 1 + offset) {\n                    offset = 0;\n                    if (maskToken.matches[tndx].isQuantifier !== true) {\n                        var match = handleMatch(maskToken.matches[tndx], [ tndx ].concat(loopNdx), quantifierRecurse);\n                        if (match && testPos === pos) {\n                            return match;\n                        } else if (testPos > pos) {\n                            break;\n                        }\n                    }\n                }\n            }\n            function mergeLocators(pos, tests) {\n                var locator = [];\n                if (!$.isArray(tests)) tests = [ tests ];\n                if (tests.length > 0) {\n                    if (tests[0].alternation === undefined) {\n                        locator = determineTestTemplate(pos, tests.slice()).locator.slice();\n                        if (locator.length === 0) locator = tests[0].locator.slice();\n                    } else {\n                        $.each(tests, function(ndx, tst) {\n                            if (tst.def !== \"\") {\n                                if (locator.length === 0) locator = tst.locator.slice(); else {\n                                    for (var i = 0; i < locator.length; i++) {\n                                        if (tst.locator[i] && locator[i].toString().indexOf(tst.locator[i]) === -1) {\n                                            locator[i] += \",\" + tst.locator[i];\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n                return locator;\n            }\n            if (pos > -1) {\n                if (ndxIntlzr === undefined) {\n                    var previousPos = pos - 1, test;\n                    while ((test = getMaskSet().validPositions[previousPos] || getMaskSet().tests[previousPos]) === undefined && previousPos > -1) {\n                        previousPos--;\n                    }\n                    if (test !== undefined && previousPos > -1) {\n                        ndxInitializer = mergeLocators(previousPos, test);\n                        cacheDependency = ndxInitializer.join(\"\");\n                        testPos = previousPos;\n                    }\n                }\n                if (getMaskSet().tests[pos] && getMaskSet().tests[pos][0].cd === cacheDependency) {\n                    return getMaskSet().tests[pos];\n                }\n                for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {\n                    var match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [ mtndx ]);\n                    if (match && testPos === pos || testPos > pos) {\n                        break;\n                    }\n                }\n            }\n            if (matches.length === 0 || insertStop) {\n                matches.push({\n                    match: {\n                        fn: null,\n                        optionality: false,\n                        casing: null,\n                        def: \"\",\n                        placeholder: \"\"\n                    },\n                    locator: [],\n                    mloc: {},\n                    cd: cacheDependency\n                });\n            }\n            if (ndxIntlzr !== undefined && getMaskSet().tests[pos]) {\n                return $.extend(true, [], matches);\n            }\n            getMaskSet().tests[pos] = $.extend(true, [], matches);\n            return getMaskSet().tests[pos];\n        }\n        function getBufferTemplate() {\n            if (getMaskSet()._buffer === undefined) {\n                getMaskSet()._buffer = getMaskTemplate(false, 1);\n                if (getMaskSet().buffer === undefined) getMaskSet().buffer = getMaskSet()._buffer.slice();\n            }\n            return getMaskSet()._buffer;\n        }\n        function getBuffer(noCache) {\n            if (getMaskSet().buffer === undefined || noCache === true) {\n                getMaskSet().buffer = getMaskTemplate(true, getLastValidPosition(), true);\n            }\n            return getMaskSet().buffer;\n        }\n        function refreshFromBuffer(start, end, buffer) {\n            var i, p;\n            if (start === true) {\n                resetMaskSet();\n                start = 0;\n                end = buffer.length;\n            } else {\n                for (i = start; i < end; i++) {\n                    delete getMaskSet().validPositions[i];\n                }\n            }\n            p = start;\n            for (i = start; i < end; i++) {\n                resetMaskSet(true);\n                if (buffer[i] !== opts.skipOptionalPartCharacter) {\n                    var valResult = isValid(p, buffer[i], true, true);\n                    if (valResult !== false) {\n                        resetMaskSet(true);\n                        p = valResult.caret !== undefined ? valResult.caret : valResult.pos + 1;\n                    }\n                }\n            }\n        }\n        function casing(elem, test, pos) {\n            switch (opts.casing || test.casing) {\n              case \"upper\":\n                elem = elem.toUpperCase();\n                break;\n\n              case \"lower\":\n                elem = elem.toLowerCase();\n                break;\n\n              case \"title\":\n                var posBefore = getMaskSet().validPositions[pos - 1];\n                if (pos === 0 || posBefore && posBefore.input === String.fromCharCode(Inputmask.keyCode.SPACE)) {\n                    elem = elem.toUpperCase();\n                } else {\n                    elem = elem.toLowerCase();\n                }\n                break;\n\n              default:\n                if ($.isFunction(opts.casing)) {\n                    var args = Array.prototype.slice.call(arguments);\n                    args.push(getMaskSet().validPositions);\n                    elem = opts.casing.apply(this, args);\n                }\n            }\n            return elem;\n        }\n        function checkAlternationMatch(altArr1, altArr2, na) {\n            var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = false, naArr = na !== undefined ? na.split(\",\") : [], naNdx;\n            for (var i = 0; i < naArr.length; i++) {\n                if ((naNdx = altArr1.indexOf(naArr[i])) !== -1) {\n                    altArr1.splice(naNdx, 1);\n                }\n            }\n            for (var alndx = 0; alndx < altArr1.length; alndx++) {\n                if ($.inArray(altArr1[alndx], altArrC) !== -1) {\n                    isMatch = true;\n                    break;\n                }\n            }\n            return isMatch;\n        }\n        function alternate(pos, c, strict, fromSetValid, rAltPos) {\n            var validPsClone = $.extend(true, {}, getMaskSet().validPositions), lastAlt, alternation, isValidRslt = false, altPos, prevAltPos, i, validPos, decisionPos, lAltPos = rAltPos !== undefined ? rAltPos : getLastValidPosition();\n            if (lAltPos === -1 && rAltPos === undefined) {\n                lastAlt = 0;\n                prevAltPos = getTest(lastAlt);\n                alternation = prevAltPos.alternation;\n            } else {\n                for (;lAltPos >= 0; lAltPos--) {\n                    altPos = getMaskSet().validPositions[lAltPos];\n                    if (altPos && altPos.alternation !== undefined) {\n                        if (prevAltPos && prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) {\n                            break;\n                        }\n                        lastAlt = lAltPos;\n                        alternation = getMaskSet().validPositions[lastAlt].alternation;\n                        prevAltPos = altPos;\n                    }\n                }\n            }\n            if (alternation !== undefined) {\n                decisionPos = parseInt(lastAlt);\n                getMaskSet().excludes[decisionPos] = getMaskSet().excludes[decisionPos] || [];\n                if (pos !== true) {\n                    getMaskSet().excludes[decisionPos].push(getDecisionTaker(prevAltPos));\n                }\n                var validInputsClone = [], staticInputsBeforePos = 0;\n                for (i = decisionPos; i < getLastValidPosition(undefined, true) + 1; i++) {\n                    validPos = getMaskSet().validPositions[i];\n                    if (validPos && validPos.generatedInput !== true) {\n                        validInputsClone.push(validPos.input);\n                    } else if (i < pos) staticInputsBeforePos++;\n                    delete getMaskSet().validPositions[i];\n                }\n                while (getMaskSet().excludes[decisionPos] && getMaskSet().excludes[decisionPos].length < 10) {\n                    var posOffset = staticInputsBeforePos * -1, validInputs = validInputsClone.slice();\n                    getMaskSet().tests[decisionPos] = undefined;\n                    resetMaskSet(true);\n                    isValidRslt = true;\n                    while (validInputs.length > 0) {\n                        var input = validInputs.shift();\n                        if (!(isValidRslt = isValid(getLastValidPosition(undefined, true) + 1, input, false, fromSetValid, true))) {\n                            break;\n                        }\n                    }\n                    if (isValidRslt && c !== undefined) {\n                        var targetLvp = getLastValidPosition(pos) + 1;\n                        for (i = decisionPos; i < getLastValidPosition() + 1; i++) {\n                            validPos = getMaskSet().validPositions[i];\n                            if ((validPos === undefined || validPos.match.fn == null) && i < pos + posOffset) {\n                                posOffset++;\n                            }\n                        }\n                        pos = pos + posOffset;\n                        isValidRslt = isValid(pos > targetLvp ? targetLvp : pos, c, strict, fromSetValid, true);\n                    }\n                    if (!isValidRslt) {\n                        resetMaskSet();\n                        prevAltPos = getTest(decisionPos);\n                        getMaskSet().validPositions = $.extend(true, {}, validPsClone);\n                        if (getMaskSet().excludes[decisionPos]) {\n                            var decisionTaker = getDecisionTaker(prevAltPos);\n                            if (getMaskSet().excludes[decisionPos].indexOf(decisionTaker) !== -1) {\n                                isValidRslt = alternate(pos, c, strict, fromSetValid, decisionPos - 1);\n                                break;\n                            }\n                            getMaskSet().excludes[decisionPos].push(decisionTaker);\n                            for (i = decisionPos; i < getLastValidPosition(undefined, true) + 1; i++) delete getMaskSet().validPositions[i];\n                        } else {\n                            isValidRslt = alternate(pos, c, strict, fromSetValid, decisionPos - 1);\n                            break;\n                        }\n                    } else break;\n                }\n            }\n            getMaskSet().excludes[decisionPos] = undefined;\n            return isValidRslt;\n        }\n        function isValid(pos, c, strict, fromSetValid, fromAlternate, validateOnly) {\n            function isSelection(posObj) {\n                return isRTL ? posObj.begin - posObj.end > 1 || posObj.begin - posObj.end === 1 : posObj.end - posObj.begin > 1 || posObj.end - posObj.begin === 1;\n            }\n            strict = strict === true;\n            var maskPos = pos;\n            if (pos.begin !== undefined) {\n                maskPos = isRTL ? pos.end : pos.begin;\n            }\n            function _isValid(position, c, strict) {\n                var rslt = false;\n                $.each(getTests(position), function(ndx, tst) {\n                    var test = tst.match;\n                    getBuffer(true);\n                    rslt = test.fn != null ? test.fn.test(c, getMaskSet(), position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && test.def !== \"\" ? {\n                        c: getPlaceholder(position, test, true) || test.def,\n                        pos: position\n                    } : false;\n                    if (rslt !== false) {\n                        var elem = rslt.c !== undefined ? rslt.c : c, validatedPos = position;\n                        elem = elem === opts.skipOptionalPartCharacter && test.fn === null ? getPlaceholder(position, test, true) || test.def : elem;\n                        if (rslt.remove !== undefined) {\n                            if (!$.isArray(rslt.remove)) rslt.remove = [ rslt.remove ];\n                            $.each(rslt.remove.sort(function(a, b) {\n                                return b - a;\n                            }), function(ndx, lmnt) {\n                                revalidateMask({\n                                    begin: lmnt,\n                                    end: lmnt + 1\n                                });\n                            });\n                        }\n                        if (rslt.insert !== undefined) {\n                            if (!$.isArray(rslt.insert)) rslt.insert = [ rslt.insert ];\n                            $.each(rslt.insert.sort(function(a, b) {\n                                return a - b;\n                            }), function(ndx, lmnt) {\n                                isValid(lmnt.pos, lmnt.c, true, fromSetValid);\n                            });\n                        }\n                        if (rslt !== true && rslt.pos !== undefined && rslt.pos !== position) {\n                            validatedPos = rslt.pos;\n                        }\n                        if (rslt !== true && rslt.pos === undefined && rslt.c === undefined) {\n                            return false;\n                        }\n                        if (!revalidateMask(pos, $.extend({}, tst, {\n                            input: casing(elem, test, validatedPos)\n                        }), fromSetValid, validatedPos)) {\n                            rslt = false;\n                        }\n                        return false;\n                    }\n                });\n                return rslt;\n            }\n            var result = true, positionsClone = $.extend(true, {}, getMaskSet().validPositions);\n            if ($.isFunction(opts.preValidation) && !strict && fromSetValid !== true && validateOnly !== true) {\n                result = opts.preValidation(getBuffer(), maskPos, c, isSelection(pos), opts, getMaskSet());\n            }\n            if (result === true) {\n                trackbackPositions(undefined, maskPos, true);\n                if (maxLength === undefined || maskPos < maxLength) {\n                    result = _isValid(maskPos, c, strict);\n                    if ((!strict || fromSetValid === true) && result === false && validateOnly !== true) {\n                        var currentPosValid = getMaskSet().validPositions[maskPos];\n                        if (currentPosValid && currentPosValid.match.fn === null && (currentPosValid.match.def === c || c === opts.skipOptionalPartCharacter)) {\n                            result = {\n                                caret: seekNext(maskPos)\n                            };\n                        } else if ((opts.insertMode || getMaskSet().validPositions[seekNext(maskPos)] === undefined) && !isMask(maskPos, true)) {\n                            for (var nPos = maskPos + 1, snPos = seekNext(maskPos); nPos <= snPos; nPos++) {\n                                result = _isValid(nPos, c, strict);\n                                if (result !== false) {\n                                    result = trackbackPositions(maskPos, result.pos !== undefined ? result.pos : nPos) || result;\n                                    maskPos = nPos;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (result === false && opts.keepStatic !== false && (opts.regex == null || isComplete(getBuffer())) && !strict && fromAlternate !== true) {\n                    result = alternate(maskPos, c, strict, fromSetValid);\n                }\n                if (result === true) {\n                    result = {\n                        pos: maskPos\n                    };\n                }\n            }\n            if ($.isFunction(opts.postValidation) && result !== false && !strict && fromSetValid !== true && validateOnly !== true) {\n                var postResult = opts.postValidation(getBuffer(true), pos.begin !== undefined ? isRTL ? pos.end : pos.begin : pos, result, opts);\n                if (postResult !== undefined) {\n                    if (postResult.refreshFromBuffer && postResult.buffer) {\n                        var refresh = postResult.refreshFromBuffer;\n                        refreshFromBuffer(refresh === true ? refresh : refresh.start, refresh.end, postResult.buffer);\n                    }\n                    result = postResult === true ? result : postResult;\n                }\n            }\n            if (result && result.pos === undefined) {\n                result.pos = maskPos;\n            }\n            if (result === false || validateOnly === true) {\n                resetMaskSet(true);\n                getMaskSet().validPositions = $.extend(true, {}, positionsClone);\n            }\n            return result;\n        }\n        function trackbackPositions(originalPos, newPos, fillOnly) {\n            var result;\n            if (originalPos === undefined) {\n                for (originalPos = newPos - 1; originalPos > 0; originalPos--) {\n                    if (getMaskSet().validPositions[originalPos]) break;\n                }\n            }\n            for (var ps = originalPos; ps < newPos; ps++) {\n                if (getMaskSet().validPositions[ps] === undefined && !isMask(ps, true)) {\n                    var vp = ps == 0 ? getTest(ps) : getMaskSet().validPositions[ps - 1];\n                    if (vp) {\n                        var tests = getTests(ps).slice();\n                        if (tests[tests.length - 1].match.def === \"\") tests.pop();\n                        var bestMatch = determineTestTemplate(ps, tests);\n                        bestMatch = $.extend({}, bestMatch, {\n                            input: getPlaceholder(ps, bestMatch.match, true) || bestMatch.match.def\n                        });\n                        bestMatch.generatedInput = true;\n                        revalidateMask(ps, bestMatch, true);\n                        if (fillOnly !== true) {\n                            var cvpInput = getMaskSet().validPositions[newPos].input;\n                            getMaskSet().validPositions[newPos] = undefined;\n                            result = isValid(newPos, cvpInput, true, true);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n        function revalidateMask(pos, validTest, fromSetValid, validatedPos) {\n            function IsEnclosedStatic(pos, valids, selection) {\n                var posMatch = valids[pos];\n                if (posMatch !== undefined && (posMatch.match.fn === null && posMatch.match.optionality !== true || posMatch.input === opts.radixPoint)) {\n                    var prevMatch = selection.begin <= pos - 1 ? valids[pos - 1] && valids[pos - 1].match.fn === null && valids[pos - 1] : valids[pos - 1], nextMatch = selection.end > pos + 1 ? valids[pos + 1] && valids[pos + 1].match.fn === null && valids[pos + 1] : valids[pos + 1];\n                    return prevMatch && nextMatch;\n                }\n                return false;\n            }\n            var begin = pos.begin !== undefined ? pos.begin : pos, end = pos.end !== undefined ? pos.end : pos;\n            if (pos.begin > pos.end) {\n                begin = pos.end;\n                end = pos.begin;\n            }\n            validatedPos = validatedPos !== undefined ? validatedPos : begin;\n            if (begin !== end || opts.insertMode && getMaskSet().validPositions[validatedPos] !== undefined && fromSetValid === undefined) {\n                var positionsClone = $.extend(true, {}, getMaskSet().validPositions), lvp = getLastValidPosition(undefined, true), i;\n                getMaskSet().p = begin;\n                for (i = lvp; i >= begin; i--) {\n                    if (getMaskSet().validPositions[i] && getMaskSet().validPositions[i].match.nativeDef === \"+\") {\n                        opts.isNegative = false;\n                    }\n                    delete getMaskSet().validPositions[i];\n                }\n                var valid = true, j = validatedPos, vps = getMaskSet().validPositions, needsValidation = false, posMatch = j, i = j;\n                if (validTest) {\n                    getMaskSet().validPositions[validatedPos] = $.extend(true, {}, validTest);\n                    posMatch++;\n                    j++;\n                    if (begin < end) i++;\n                }\n                for (;i <= lvp; i++) {\n                    var t = positionsClone[i];\n                    if (t !== undefined && (i >= end || i >= begin && t.generatedInput !== true && IsEnclosedStatic(i, positionsClone, {\n                        begin: begin,\n                        end: end\n                    }))) {\n                        while (getTest(posMatch).match.def !== \"\") {\n                            if (needsValidation === false && positionsClone[posMatch] && positionsClone[posMatch].match.nativeDef === t.match.nativeDef) {\n                                getMaskSet().validPositions[posMatch] = $.extend(true, {}, positionsClone[posMatch]);\n                                getMaskSet().validPositions[posMatch].input = t.input;\n                                trackbackPositions(undefined, posMatch, true);\n                                j = posMatch + 1;\n                                valid = true;\n                            } else if (positionCanMatchDefinition(posMatch, t.match.def)) {\n                                var result = isValid(posMatch, t.input, true, true);\n                                valid = result !== false;\n                                j = result.caret || result.insert ? getLastValidPosition() : posMatch + 1;\n                                needsValidation = true;\n                            } else {\n                                valid = t.generatedInput === true || t.input === opts.radixPoint && opts.numericInput === true;\n                            }\n                            if (valid) break;\n                            if (!valid && posMatch > end && isMask(posMatch, true) && (t.match.fn !== null || posMatch > getMaskSet().maskLength)) {\n                                break;\n                            }\n                            posMatch++;\n                        }\n                        if (getTest(posMatch).match.def == \"\") valid = false;\n                        posMatch = j;\n                    }\n                    if (!valid) break;\n                }\n                if (!valid) {\n                    getMaskSet().validPositions = $.extend(true, {}, positionsClone);\n                    resetMaskSet(true);\n                    return false;\n                }\n            } else if (validTest) {\n                getMaskSet().validPositions[validatedPos] = $.extend(true, {}, validTest);\n            }\n            resetMaskSet(true);\n            return true;\n        }\n        function isMask(pos, strict) {\n            var test = getTestTemplate(pos).match;\n            if (test.def === \"\") test = getTest(pos).match;\n            if (test.fn != null) {\n                return test.fn;\n            }\n            if (strict !== true && pos > -1) {\n                var tests = getTests(pos);\n                return tests.length > 1 + (tests[tests.length - 1].match.def === \"\" ? 1 : 0);\n            }\n            return false;\n        }\n        function seekNext(pos, newBlock) {\n            var position = pos + 1;\n            while (getTest(position).match.def !== \"\" && (newBlock === true && (getTest(position).match.newBlockMarker !== true || !isMask(position)) || newBlock !== true && !isMask(position))) {\n                position++;\n            }\n            return position;\n        }\n        function seekPrevious(pos, newBlock) {\n            var position = pos, tests;\n            if (position <= 0) return 0;\n            while (--position > 0 && (newBlock === true && getTest(position).match.newBlockMarker !== true || newBlock !== true && !isMask(position) && (tests = getTests(position), \n            tests.length < 2 || tests.length === 2 && tests[1].match.def === \"\"))) {}\n            return position;\n        }\n        function getBufferElement(position) {\n            return getMaskSet().validPositions[position] === undefined ? getPlaceholder(position) : getMaskSet().validPositions[position].input;\n        }\n        function writeBuffer(input, buffer, caretPos, event, triggerEvents) {\n            if (event && $.isFunction(opts.onBeforeWrite)) {\n                var result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);\n                if (result) {\n                    if (result.refreshFromBuffer) {\n                        var refresh = result.refreshFromBuffer;\n                        refreshFromBuffer(refresh === true ? refresh : refresh.start, refresh.end, result.buffer || buffer);\n                        buffer = getBuffer(true);\n                    }\n                    if (caretPos !== undefined) caretPos = result.caret !== undefined ? result.caret : caretPos;\n                }\n            }\n            if (input !== undefined) {\n                input.inputmask._valueSet(buffer.join(\"\"));\n                if (caretPos !== undefined && (event === undefined || event.type !== \"blur\")) {\n                    caret(input, caretPos);\n                } else renderColorMask(input, caretPos, buffer.length === 0);\n                if (triggerEvents === true) {\n                    var $input = $(input), nptVal = input.inputmask._valueGet();\n                    skipInputEvent = true;\n                    $input.trigger(\"input\");\n                    setTimeout(function() {\n                        if (nptVal === getBufferTemplate().join(\"\")) {\n                            $input.trigger(\"cleared\");\n                        } else if (isComplete(buffer) === true) {\n                            $input.trigger(\"complete\");\n                        }\n                    }, 0);\n                }\n            }\n        }\n        function getPlaceholder(pos, test, returnPL) {\n            test = test || getTest(pos).match;\n            if (test.placeholder !== undefined || returnPL === true) {\n                return $.isFunction(test.placeholder) ? test.placeholder(opts) : test.placeholder;\n            } else if (test.fn === null) {\n                if (pos > -1 && getMaskSet().validPositions[pos] === undefined) {\n                    var tests = getTests(pos), staticAlternations = [], prevTest;\n                    if (tests.length > 1 + (tests[tests.length - 1].match.def === \"\" ? 1 : 0)) {\n                        for (var i = 0; i < tests.length; i++) {\n                            if (tests[i].match.optionality !== true && tests[i].match.optionalQuantifier !== true && (tests[i].match.fn === null || (prevTest === undefined || tests[i].match.fn.test(prevTest.match.def, getMaskSet(), pos, true, opts) !== false))) {\n                                staticAlternations.push(tests[i]);\n                                if (tests[i].match.fn === null) prevTest = tests[i];\n                                if (staticAlternations.length > 1) {\n                                    if (/[0-9a-bA-Z]/.test(staticAlternations[0].match.def)) {\n                                        return opts.placeholder.charAt(pos % opts.placeholder.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return test.def;\n            }\n            return opts.placeholder.charAt(pos % opts.placeholder.length);\n        }\n        var EventRuler = {\n            on: function(input, eventName, eventHandler) {\n                var ev = function(e) {\n                    var that = this;\n                    if (that.inputmask === undefined && this.nodeName !== \"FORM\") {\n                        var imOpts = $.data(that, \"_inputmask_opts\");\n                        if (imOpts) new Inputmask(imOpts).mask(that); else EventRuler.off(that);\n                    } else if (e.type !== \"setvalue\" && this.nodeName !== \"FORM\" && (that.disabled || that.readOnly && !(e.type === \"keydown\" && (e.ctrlKey && e.keyCode === 67) || opts.tabThrough === false && e.keyCode === Inputmask.keyCode.TAB))) {\n                        e.preventDefault();\n                    } else {\n                        switch (e.type) {\n                          case \"input\":\n                            if (skipInputEvent === true) {\n                                skipInputEvent = false;\n                                return e.preventDefault();\n                            }\n                            if (mobile) {\n                                var args = arguments;\n                                setTimeout(function() {\n                                    eventHandler.apply(that, args);\n                                    caret(that, that.inputmask.caretPos, undefined, true);\n                                }, 0);\n                                return false;\n                            }\n                            break;\n\n                          case \"keydown\":\n                            skipKeyPressEvent = false;\n                            skipInputEvent = false;\n                            break;\n\n                          case \"keypress\":\n                            if (skipKeyPressEvent === true) {\n                                return e.preventDefault();\n                            }\n                            skipKeyPressEvent = true;\n                            break;\n\n                          case \"click\":\n                            if (iemobile || iphone) {\n                                var args = arguments;\n                                setTimeout(function() {\n                                    eventHandler.apply(that, args);\n                                }, 0);\n                                return false;\n                            }\n                            break;\n                        }\n                        var returnVal = eventHandler.apply(that, arguments);\n                        if (returnVal === false) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                        }\n                        return returnVal;\n                    }\n                };\n                input.inputmask.events[eventName] = input.inputmask.events[eventName] || [];\n                input.inputmask.events[eventName].push(ev);\n                if ($.inArray(eventName, [ \"submit\", \"reset\" ]) !== -1) {\n                    if (input.form !== null) $(input.form).on(eventName, ev);\n                } else {\n                    $(input).on(eventName, ev);\n                }\n            },\n            off: function(input, event) {\n                if (input.inputmask && input.inputmask.events) {\n                    var events;\n                    if (event) {\n                        events = [];\n                        events[event] = input.inputmask.events[event];\n                    } else {\n                        events = input.inputmask.events;\n                    }\n                    $.each(events, function(eventName, evArr) {\n                        while (evArr.length > 0) {\n                            var ev = evArr.pop();\n                            if ($.inArray(eventName, [ \"submit\", \"reset\" ]) !== -1) {\n                                if (input.form !== null) $(input.form).off(eventName, ev);\n                            } else {\n                                $(input).off(eventName, ev);\n                            }\n                        }\n                        delete input.inputmask.events[eventName];\n                    });\n                }\n            }\n        };\n        var EventHandlers = {\n            keydownEvent: function(e) {\n                var input = this, $input = $(input), k = e.keyCode, pos = caret(input);\n                if (k === Inputmask.keyCode.BACKSPACE || k === Inputmask.keyCode.DELETE || iphone && k === Inputmask.keyCode.BACKSPACE_SAFARI || e.ctrlKey && k === Inputmask.keyCode.X && !isInputEventSupported(\"cut\")) {\n                    e.preventDefault();\n                    handleRemove(input, k, pos);\n                    writeBuffer(input, getBuffer(true), getMaskSet().p, e, input.inputmask._valueGet() !== getBuffer().join(\"\"));\n                } else if (k === Inputmask.keyCode.END || k === Inputmask.keyCode.PAGE_DOWN) {\n                    e.preventDefault();\n                    var caretPos = seekNext(getLastValidPosition());\n                    caret(input, e.shiftKey ? pos.begin : caretPos, caretPos, true);\n                } else if (k === Inputmask.keyCode.HOME && !e.shiftKey || k === Inputmask.keyCode.PAGE_UP) {\n                    e.preventDefault();\n                    caret(input, 0, e.shiftKey ? pos.begin : 0, true);\n                } else if ((opts.undoOnEscape && k === Inputmask.keyCode.ESCAPE || k === 90 && e.ctrlKey) && e.altKey !== true) {\n                    checkVal(input, true, false, undoValue.split(\"\"));\n                    $input.trigger(\"click\");\n                } else if (k === Inputmask.keyCode.INSERT && !(e.shiftKey || e.ctrlKey)) {\n                    opts.insertMode = !opts.insertMode;\n                    input.setAttribute(\"im-insert\", opts.insertMode);\n                } else if (opts.tabThrough === true && k === Inputmask.keyCode.TAB) {\n                    if (e.shiftKey === true) {\n                        if (getTest(pos.begin).match.fn === null) {\n                            pos.begin = seekNext(pos.begin);\n                        }\n                        pos.end = seekPrevious(pos.begin, true);\n                        pos.begin = seekPrevious(pos.end, true);\n                    } else {\n                        pos.begin = seekNext(pos.begin, true);\n                        pos.end = seekNext(pos.begin, true);\n                        if (pos.end < getMaskSet().maskLength) pos.end--;\n                    }\n                    if (pos.begin < getMaskSet().maskLength) {\n                        e.preventDefault();\n                        caret(input, pos.begin, pos.end);\n                    }\n                }\n                opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts);\n                ignorable = $.inArray(k, opts.ignorables) !== -1;\n            },\n            keypressEvent: function(e, checkval, writeOut, strict, ndx) {\n                var input = this, $input = $(input), k = e.which || e.charCode || e.keyCode;\n                if (checkval !== true && (!(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable))) {\n                    if (k === Inputmask.keyCode.ENTER && undoValue !== getBuffer().join(\"\")) {\n                        undoValue = getBuffer().join(\"\");\n                        setTimeout(function() {\n                            $input.trigger(\"change\");\n                        }, 0);\n                    }\n                    return true;\n                } else {\n                    if (k) {\n                        if (k === 46 && e.shiftKey === false && opts.radixPoint !== \"\") k = opts.radixPoint.charCodeAt(0);\n                        var pos = checkval ? {\n                            begin: ndx,\n                            end: ndx\n                        } : caret(input), forwardPosition, c = String.fromCharCode(k), offset = 0;\n                        if (opts._radixDance && opts.numericInput) {\n                            var caretPos = getBuffer().indexOf(opts.radixPoint.charAt(0)) + 1;\n                            if (pos.begin <= caretPos) {\n                                if (k === opts.radixPoint.charCodeAt(0)) offset = 1;\n                                pos.begin -= 1;\n                                pos.end -= 1;\n                            }\n                        }\n                        getMaskSet().writeOutBuffer = true;\n                        var valResult = isValid(pos, c, strict);\n                        if (valResult !== false) {\n                            resetMaskSet(true);\n                            forwardPosition = valResult.caret !== undefined ? valResult.caret : seekNext(valResult.pos.begin ? valResult.pos.begin : valResult.pos);\n                            getMaskSet().p = forwardPosition;\n                        }\n                        forwardPosition = (opts.numericInput && valResult.caret === undefined ? seekPrevious(forwardPosition) : forwardPosition) + offset;\n                        if (writeOut !== false) {\n                            setTimeout(function() {\n                                opts.onKeyValidation.call(input, k, valResult, opts);\n                            }, 0);\n                            if (getMaskSet().writeOutBuffer && valResult !== false) {\n                                var buffer = getBuffer();\n                                writeBuffer(input, buffer, forwardPosition, e, checkval !== true);\n                            }\n                        }\n                        e.preventDefault();\n                        if (checkval) {\n                            if (valResult !== false) valResult.forwardPosition = forwardPosition;\n                            return valResult;\n                        }\n                    }\n                }\n            },\n            pasteEvent: function(e) {\n                var input = this, ev = e.originalEvent || e, $input = $(input), inputValue = input.inputmask._valueGet(true), caretPos = caret(input), tempValue;\n                if (isRTL) {\n                    tempValue = caretPos.end;\n                    caretPos.end = caretPos.begin;\n                    caretPos.begin = tempValue;\n                }\n                var valueBeforeCaret = inputValue.substr(0, caretPos.begin), valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);\n                if (valueBeforeCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(0, caretPos.begin).join(\"\")) valueBeforeCaret = \"\";\n                if (valueAfterCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(caretPos.end).join(\"\")) valueAfterCaret = \"\";\n                if (window.clipboardData && window.clipboardData.getData) {\n                    inputValue = valueBeforeCaret + window.clipboardData.getData(\"Text\") + valueAfterCaret;\n                } else if (ev.clipboardData && ev.clipboardData.getData) {\n                    inputValue = valueBeforeCaret + ev.clipboardData.getData(\"text/plain\") + valueAfterCaret;\n                } else return true;\n                var pasteValue = inputValue;\n                if ($.isFunction(opts.onBeforePaste)) {\n                    pasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts);\n                    if (pasteValue === false) {\n                        return e.preventDefault();\n                    }\n                    if (!pasteValue) {\n                        pasteValue = inputValue;\n                    }\n                }\n                checkVal(input, false, false, pasteValue.toString().split(\"\"));\n                writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()), e, undoValue !== getBuffer().join(\"\"));\n                return e.preventDefault();\n            },\n            inputFallBackEvent: function(e) {\n                function radixPointHandler(input, inputValue, caretPos) {\n                    if (inputValue.charAt(caretPos.begin - 1) === \".\" && opts.radixPoint !== \"\") {\n                        inputValue = inputValue.split(\"\");\n                        inputValue[caretPos.begin - 1] = opts.radixPoint.charAt(0);\n                        inputValue = inputValue.join(\"\");\n                    }\n                    return inputValue;\n                }\n                function ieMobileHandler(input, inputValue, caretPos) {\n                    if (iemobile) {\n                        var inputChar = inputValue.replace(getBuffer().join(\"\"), \"\");\n                        if (inputChar.length === 1) {\n                            var iv = inputValue.split(\"\");\n                            iv.splice(caretPos.begin, 0, inputChar);\n                            inputValue = iv.join(\"\");\n                        }\n                    }\n                    return inputValue;\n                }\n                var input = this, inputValue = input.inputmask._valueGet();\n                if (getBuffer().join(\"\") !== inputValue) {\n                    var caretPos = caret(input);\n                    inputValue = radixPointHandler(input, inputValue, caretPos);\n                    inputValue = ieMobileHandler(input, inputValue, caretPos);\n                    if (getBuffer().join(\"\") !== inputValue) {\n                        var buffer = getBuffer().join(\"\"), offset = !opts.numericInput && inputValue.length > buffer.length ? -1 : 0, frontPart = inputValue.substr(0, caretPos.begin), backPart = inputValue.substr(caretPos.begin), frontBufferPart = buffer.substr(0, caretPos.begin + offset), backBufferPart = buffer.substr(caretPos.begin + offset);\n                        var selection = caretPos, entries = \"\", isEntry = false;\n                        if (frontPart !== frontBufferPart) {\n                            var fpl = (isEntry = frontPart.length >= frontBufferPart.length) ? frontPart.length : frontBufferPart.length, i;\n                            for (i = 0; frontPart.charAt(i) === frontBufferPart.charAt(i) && i < fpl; i++) ;\n                            if (isEntry) {\n                                selection.begin = i - offset;\n                                entries += frontPart.slice(i, selection.end);\n                            }\n                        }\n                        if (backPart !== backBufferPart) {\n                            if (backPart.length > backBufferPart.length) {\n                                entries += backPart.slice(0, 1);\n                            } else {\n                                if (backPart.length < backBufferPart.length) {\n                                    selection.end += backBufferPart.length - backPart.length;\n                                    if (!isEntry && opts.radixPoint !== \"\" && backPart === \"\" && frontPart.charAt(selection.begin + offset - 1) === opts.radixPoint) {\n                                        selection.begin--;\n                                        entries = opts.radixPoint;\n                                    }\n                                }\n                            }\n                        }\n                        writeBuffer(input, getBuffer(), {\n                            begin: selection.begin + offset,\n                            end: selection.end + offset\n                        });\n                        if (entries.length > 0) {\n                            $.each(entries.split(\"\"), function(ndx, entry) {\n                                var keypress = new $.Event(\"keypress\");\n                                keypress.which = entry.charCodeAt(0);\n                                ignorable = false;\n                                EventHandlers.keypressEvent.call(input, keypress);\n                            });\n                        } else {\n                            if (selection.begin === selection.end - 1) {\n                                selection.begin = seekPrevious(selection.begin + 1);\n                                if (selection.begin === selection.end - 1) {\n                                    caret(input, selection.begin);\n                                } else {\n                                    caret(input, selection.begin, selection.end);\n                                }\n                            }\n                            var keydown = new $.Event(\"keydown\");\n                            keydown.keyCode = opts.numericInput ? Inputmask.keyCode.BACKSPACE : Inputmask.keyCode.DELETE;\n                            EventHandlers.keydownEvent.call(input, keydown);\n                        }\n                        e.preventDefault();\n                    }\n                }\n            },\n            beforeInputEvent: function(e) {\n                if (e.cancelable) {\n                    var input = this;\n                    switch (e.inputType) {\n                      case \"insertText\":\n                        $.each(e.data.split(\"\"), function(ndx, entry) {\n                            var keypress = new $.Event(\"keypress\");\n                            keypress.which = entry.charCodeAt(0);\n                            ignorable = false;\n                            EventHandlers.keypressEvent.call(input, keypress);\n                        });\n                        return e.preventDefault();\n\n                      case \"deleteContentBackward\":\n                        var keydown = new $.Event(\"keydown\");\n                        keydown.keyCode = Inputmask.keyCode.BACKSPACE;\n                        EventHandlers.keydownEvent.call(input, keydown);\n                        return e.preventDefault();\n\n                      case \"deleteContentForward\":\n                        var keydown = new $.Event(\"keydown\");\n                        keydown.keyCode = Inputmask.keyCode.DELETE;\n                        EventHandlers.keydownEvent.call(input, keydown);\n                        return e.preventDefault();\n                    }\n                }\n            },\n            setValueEvent: function(e) {\n                this.inputmask.refreshValue = false;\n                var input = this, value = e && e.detail ? e.detail[0] : arguments[1], value = value || input.inputmask._valueGet(true);\n                if ($.isFunction(opts.onBeforeMask)) value = opts.onBeforeMask.call(inputmask, value, opts) || value;\n                value = value.split(\"\");\n                checkVal(input, true, false, value);\n                undoValue = getBuffer().join(\"\");\n                if ((opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate().join(\"\")) {\n                    input.inputmask._valueSet(\"\");\n                }\n            },\n            focusEvent: function(e) {\n                var input = this, nptValue = input.inputmask._valueGet();\n                if (opts.showMaskOnFocus && (!opts.showMaskOnHover || opts.showMaskOnHover && nptValue === \"\")) {\n                    if (input.inputmask._valueGet() !== getBuffer().join(\"\")) {\n                        writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()));\n                    } else if (mouseEnter === false) {\n                        caret(input, seekNext(getLastValidPosition()));\n                    }\n                }\n                if (opts.positionCaretOnTab === true && mouseEnter === false) {\n                    EventHandlers.clickEvent.apply(input, [ e, true ]);\n                }\n                undoValue = getBuffer().join(\"\");\n            },\n            mouseleaveEvent: function(e) {\n                var input = this;\n                mouseEnter = false;\n                if (opts.clearMaskOnLostFocus && document.activeElement !== input) {\n                    input.placeholder = originalPlaceholder;\n                    if (input.placeholder === \"\") input.removeAttribute(\"placeholder\");\n                }\n            },\n            clickEvent: function(e, tabbed) {\n                function doRadixFocus(clickPos) {\n                    if (opts.radixPoint !== \"\") {\n                        var vps = getMaskSet().validPositions;\n                        if (vps[clickPos] === undefined || vps[clickPos].input === getPlaceholder(clickPos)) {\n                            if (clickPos < seekNext(-1)) return true;\n                            var radixPos = $.inArray(opts.radixPoint, getBuffer());\n                            if (radixPos !== -1) {\n                                for (var vp in vps) {\n                                    if (radixPos < vp && vps[vp].input !== getPlaceholder(vp)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                }\n                var input = this;\n                setTimeout(function() {\n                    if (document.activeElement === input) {\n                        var selectedCaret = caret(input);\n                        if (tabbed) {\n                            if (isRTL) {\n                                selectedCaret.end = selectedCaret.begin;\n                            } else {\n                                selectedCaret.begin = selectedCaret.end;\n                            }\n                        }\n                        if (selectedCaret.begin === selectedCaret.end) {\n                            switch (opts.positionCaretOnClick) {\n                              case \"none\":\n                                break;\n\n                              case \"select\":\n                                caret(input, 0, getBuffer().length);\n                                break;\n\n                              case \"ignore\":\n                                caret(input, seekNext(getLastValidPosition()));\n                                break;\n\n                              case \"radixFocus\":\n                                if (doRadixFocus(selectedCaret.begin)) {\n                                    var radixPos = getBuffer().join(\"\").indexOf(opts.radixPoint);\n                                    caret(input, opts.numericInput ? seekNext(radixPos) : radixPos);\n                                    break;\n                                }\n\n                              default:\n                                var clickPosition = selectedCaret.begin, lvclickPosition = getLastValidPosition(clickPosition, true), lastPosition = seekNext(lvclickPosition);\n                                if (clickPosition < lastPosition) {\n                                    caret(input, !isMask(clickPosition, true) && !isMask(clickPosition - 1, true) ? seekNext(clickPosition) : clickPosition);\n                                } else {\n                                    var lvp = getMaskSet().validPositions[lvclickPosition], tt = getTestTemplate(lastPosition, lvp ? lvp.match.locator : undefined, lvp), placeholder = getPlaceholder(lastPosition, tt.match);\n                                    if (placeholder !== \"\" && getBuffer()[lastPosition] !== placeholder && tt.match.optionalQuantifier !== true && tt.match.newBlockMarker !== true || !isMask(lastPosition, opts.keepStatic) && tt.match.def === placeholder) {\n                                        var newPos = seekNext(lastPosition);\n                                        if (clickPosition >= newPos || clickPosition === lastPosition) {\n                                            lastPosition = newPos;\n                                        }\n                                    }\n                                    caret(input, lastPosition);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }, 0);\n            },\n            cutEvent: function(e) {\n                var input = this, $input = $(input), pos = caret(input), ev = e.originalEvent || e;\n                var clipboardData = window.clipboardData || ev.clipboardData, clipData = isRTL ? getBuffer().slice(pos.end, pos.begin) : getBuffer().slice(pos.begin, pos.end);\n                clipboardData.setData(\"text\", isRTL ? clipData.reverse().join(\"\") : clipData.join(\"\"));\n                if (document.execCommand) document.execCommand(\"copy\");\n                handleRemove(input, Inputmask.keyCode.DELETE, pos);\n                writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue !== getBuffer().join(\"\"));\n            },\n            blurEvent: function(e) {\n                var $input = $(this), input = this;\n                if (input.inputmask) {\n                    input.placeholder = originalPlaceholder;\n                    if (input.placeholder === \"\") input.removeAttribute(\"placeholder\");\n                    var nptValue = input.inputmask._valueGet(), buffer = getBuffer().slice();\n                    if (nptValue !== \"\" || colorMask !== undefined) {\n                        if (opts.clearMaskOnLostFocus) {\n                            if (getLastValidPosition() === -1 && nptValue === getBufferTemplate().join(\"\")) {\n                                buffer = [];\n                            } else {\n                                clearOptionalTail(buffer);\n                            }\n                        }\n                        if (isComplete(buffer) === false) {\n                            setTimeout(function() {\n                                $input.trigger(\"incomplete\");\n                            }, 0);\n                            if (opts.clearIncomplete) {\n                                resetMaskSet();\n                                if (opts.clearMaskOnLostFocus) {\n                                    buffer = [];\n                                } else {\n                                    buffer = getBufferTemplate().slice();\n                                }\n                            }\n                        }\n                        writeBuffer(input, buffer, undefined, e);\n                    }\n                    if (undoValue !== getBuffer().join(\"\")) {\n                        undoValue = buffer.join(\"\");\n                        $input.trigger(\"change\");\n                    }\n                }\n            },\n            mouseenterEvent: function(e) {\n                var input = this;\n                mouseEnter = true;\n                if (document.activeElement !== input && opts.showMaskOnHover) {\n                    input.placeholder = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join(\"\");\n                }\n            },\n            submitEvent: function(e) {\n                if (undoValue !== getBuffer().join(\"\")) {\n                    $el.trigger(\"change\");\n                }\n                if (opts.clearMaskOnLostFocus && getLastValidPosition() === -1 && el.inputmask._valueGet && el.inputmask._valueGet() === getBufferTemplate().join(\"\")) {\n                    el.inputmask._valueSet(\"\");\n                }\n                if (opts.clearIncomplete && isComplete(getBuffer()) === false) {\n                    el.inputmask._valueSet(\"\");\n                }\n                if (opts.removeMaskOnSubmit) {\n                    el.inputmask._valueSet(el.inputmask.unmaskedvalue(), true);\n                    setTimeout(function() {\n                        writeBuffer(el, getBuffer());\n                    }, 0);\n                }\n            },\n            resetEvent: function(e) {\n                el.inputmask.refreshValue = true;\n                setTimeout(function() {\n                    $el.trigger(\"setvalue\");\n                }, 0);\n            }\n        };\n        function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {\n            var inputmask = this || input.inputmask, inputValue = nptvl.slice(), charCodes = \"\", initialNdx = -1, result = undefined;\n            function isTemplateMatch(ndx, charCodes) {\n                var charCodeNdx = getMaskTemplate(true, 0, false).slice(ndx, seekNext(ndx)).join(\"\").replace(/'/g, \"\").indexOf(charCodes);\n                return charCodeNdx !== -1 && !isMask(ndx) && (getTest(ndx).match.nativeDef === charCodes.charAt(0) || getTest(ndx).match.fn === null && getTest(ndx).match.nativeDef === \"'\" + charCodes.charAt(0) || getTest(ndx).match.nativeDef === \" \" && (getTest(ndx + 1).match.nativeDef === charCodes.charAt(0) || getTest(ndx + 1).match.fn === null && getTest(ndx + 1).match.nativeDef === \"'\" + charCodes.charAt(0)));\n            }\n            resetMaskSet();\n            if (!strict && opts.autoUnmask !== true) {\n                var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(\"\"), matches = inputValue.join(\"\").match(new RegExp(\"^\" + Inputmask.escapeRegex(staticInput), \"g\"));\n                if (matches && matches.length > 0) {\n                    inputValue.splice(0, matches.length * staticInput.length);\n                    initialNdx = seekNext(initialNdx);\n                }\n            } else {\n                initialNdx = seekNext(initialNdx);\n            }\n            if (initialNdx === -1) {\n                getMaskSet().p = seekNext(initialNdx);\n                initialNdx = 0;\n            } else getMaskSet().p = initialNdx;\n            inputmask.caretPos = {\n                begin: initialNdx\n            };\n            $.each(inputValue, function(ndx, charCode) {\n                if (charCode !== undefined) {\n                    if (getMaskSet().validPositions[ndx] === undefined && inputValue[ndx] === getPlaceholder(ndx) && isMask(ndx, true) && isValid(ndx, inputValue[ndx], true, undefined, undefined, true) === false) {\n                        getMaskSet().p++;\n                    } else {\n                        var keypress = new $.Event(\"_checkval\");\n                        keypress.which = charCode.charCodeAt(0);\n                        charCodes += charCode;\n                        var lvp = getLastValidPosition(undefined, true);\n                        if (!isTemplateMatch(initialNdx, charCodes)) {\n                            result = EventHandlers.keypressEvent.call(input, keypress, true, false, strict, inputmask.caretPos.begin);\n                            if (result) {\n                                initialNdx = inputmask.caretPos.begin + 1;\n                                charCodes = \"\";\n                            }\n                        } else {\n                            result = EventHandlers.keypressEvent.call(input, keypress, true, false, strict, lvp + 1);\n                        }\n                        if (result) {\n                            writeBuffer(undefined, getBuffer(), result.forwardPosition, keypress, false);\n                            inputmask.caretPos = {\n                                begin: result.forwardPosition,\n                                end: result.forwardPosition\n                            };\n                        }\n                    }\n                }\n            });\n            if (writeOut) writeBuffer(input, getBuffer(), result ? result.forwardPosition : undefined, initiatingEvent || new $.Event(\"checkval\"), initiatingEvent && initiatingEvent.type === \"input\");\n        }\n        function unmaskedvalue(input) {\n            if (input) {\n                if (input.inputmask === undefined) {\n                    return input.value;\n                }\n                if (input.inputmask && input.inputmask.refreshValue) {\n                    EventHandlers.setValueEvent.call(input);\n                }\n            }\n            var umValue = [], vps = getMaskSet().validPositions;\n            for (var pndx in vps) {\n                if (vps[pndx].match && vps[pndx].match.fn != null) {\n                    umValue.push(vps[pndx].input);\n                }\n            }\n            var unmaskedValue = umValue.length === 0 ? \"\" : (isRTL ? umValue.reverse() : umValue).join(\"\");\n            if ($.isFunction(opts.onUnMask)) {\n                var bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join(\"\");\n                unmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);\n            }\n            return unmaskedValue;\n        }\n        function caret(input, begin, end, notranslate) {\n            function translatePosition(pos) {\n                if (isRTL && typeof pos === \"number\" && (!opts.greedy || opts.placeholder !== \"\") && el) {\n                    pos = el.inputmask._valueGet().length - pos;\n                }\n                return pos;\n            }\n            var range;\n            if (begin !== undefined) {\n                if ($.isArray(begin)) {\n                    end = isRTL ? begin[0] : begin[1];\n                    begin = isRTL ? begin[1] : begin[0];\n                }\n                if (begin.begin !== undefined) {\n                    end = isRTL ? begin.begin : begin.end;\n                    begin = isRTL ? begin.end : begin.begin;\n                }\n                if (typeof begin === \"number\") {\n                    begin = notranslate ? begin : translatePosition(begin);\n                    end = notranslate ? end : translatePosition(end);\n                    end = typeof end == \"number\" ? end : begin;\n                    var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;\n                    input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0;\n                    input.inputmask.caretPos = {\n                        begin: begin,\n                        end: end\n                    };\n                    if (input === document.activeElement) {\n                        if (\"selectionStart\" in input) {\n                            input.selectionStart = begin;\n                            input.selectionEnd = end;\n                        } else if (window.getSelection) {\n                            range = document.createRange();\n                            if (input.firstChild === undefined || input.firstChild === null) {\n                                var textNode = document.createTextNode(\"\");\n                                input.appendChild(textNode);\n                            }\n                            range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length);\n                            range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length);\n                            range.collapse(true);\n                            var sel = window.getSelection();\n                            sel.removeAllRanges();\n                            sel.addRange(range);\n                        } else if (input.createTextRange) {\n                            range = input.createTextRange();\n                            range.collapse(true);\n                            range.moveEnd(\"character\", end);\n                            range.moveStart(\"character\", begin);\n                            range.select();\n                        }\n                        renderColorMask(input, {\n                            begin: begin,\n                            end: end\n                        });\n                    }\n                }\n            } else {\n                if (\"selectionStart\" in input) {\n                    begin = input.selectionStart;\n                    end = input.selectionEnd;\n                } else if (window.getSelection) {\n                    range = window.getSelection().getRangeAt(0);\n                    if (range.commonAncestorContainer.parentNode === input || range.commonAncestorContainer === input) {\n                        begin = range.startOffset;\n                        end = range.endOffset;\n                    }\n                } else if (document.selection && document.selection.createRange) {\n                    range = document.selection.createRange();\n                    begin = 0 - range.duplicate().moveStart(\"character\", -input.inputmask._valueGet().length);\n                    end = begin + range.text.length;\n                }\n                return {\n                    begin: notranslate ? begin : translatePosition(begin),\n                    end: notranslate ? end : translatePosition(end)\n                };\n            }\n        }\n        function determineLastRequiredPosition(returnDefinition) {\n            var buffer = getMaskTemplate(true, getLastValidPosition(), true, true), bl = buffer.length, pos, lvp = getLastValidPosition(), positions = {}, lvTest = getMaskSet().validPositions[lvp], ndxIntlzr = lvTest !== undefined ? lvTest.locator.slice() : undefined, testPos;\n            for (pos = lvp + 1; pos < buffer.length; pos++) {\n                testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);\n                ndxIntlzr = testPos.locator.slice();\n                positions[pos] = $.extend(true, {}, testPos);\n            }\n            var lvTestAlt = lvTest && lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation] : undefined;\n            for (pos = bl - 1; pos > lvp; pos--) {\n                testPos = positions[pos];\n                if ((testPos.match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && testPos.match.fn != null || testPos.match.fn === null && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(\",\"), lvTestAlt.toString().split(\",\")) && getTests(pos)[0].def !== \"\")) && buffer[pos] === getPlaceholder(pos, testPos.match)) {\n                    bl--;\n                } else break;\n            }\n            return returnDefinition ? {\n                l: bl,\n                def: positions[bl] ? positions[bl].match : undefined\n            } : bl;\n        }\n        function clearOptionalTail(buffer) {\n            buffer.length = 0;\n            var template = getMaskTemplate(true, 0, true, undefined, true), lmnt, validPos;\n            while (lmnt = template.shift(), lmnt !== undefined) buffer.push(lmnt);\n            return buffer;\n        }\n        function isComplete(buffer) {\n            if ($.isFunction(opts.isComplete)) return opts.isComplete(buffer, opts);\n            if (opts.repeat === \"*\") return undefined;\n            var complete = false, lrp = determineLastRequiredPosition(true), aml = seekPrevious(lrp.l);\n            if (lrp.def === undefined || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {\n                complete = true;\n                for (var i = 0; i <= aml; i++) {\n                    var test = getTestTemplate(i).match;\n                    if (test.fn !== null && getMaskSet().validPositions[i] === undefined && test.optionality !== true && test.optionalQuantifier !== true || test.fn === null && buffer[i] !== getPlaceholder(i, test)) {\n                        complete = false;\n                        break;\n                    }\n                }\n            }\n            return complete;\n        }\n        function handleRemove(input, k, pos, strict, fromIsValid) {\n            if (opts.numericInput || isRTL) {\n                if (k === Inputmask.keyCode.BACKSPACE) {\n                    k = Inputmask.keyCode.DELETE;\n                } else if (k === Inputmask.keyCode.DELETE) {\n                    k = Inputmask.keyCode.BACKSPACE;\n                }\n                if (isRTL) {\n                    var pend = pos.end;\n                    pos.end = pos.begin;\n                    pos.begin = pend;\n                }\n            }\n            if (k === Inputmask.keyCode.BACKSPACE && pos.end - pos.begin < 1) {\n                pos.begin = seekPrevious(pos.begin);\n                if (getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator) {\n                    pos.begin--;\n                }\n            } else if (k === Inputmask.keyCode.DELETE && pos.begin === pos.end) {\n                pos.end = isMask(pos.end, true) && (getMaskSet().validPositions[pos.end] && getMaskSet().validPositions[pos.end].input !== opts.radixPoint) ? pos.end + 1 : seekNext(pos.end) + 1;\n                if (getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator) {\n                    pos.end++;\n                }\n            }\n            revalidateMask(pos);\n            if (strict !== true && opts.keepStatic !== false || opts.regex !== null) {\n                var result = alternate(true);\n                if (result) {\n                    var newPos = result.caret !== undefined ? result.caret : result.pos ? seekNext(result.pos.begin ? result.pos.begin : result.pos) : getLastValidPosition(-1, true);\n                    if (k !== Inputmask.keyCode.DELETE || pos.begin > newPos) {\n                        pos.begin == newPos;\n                    }\n                }\n            }\n            var lvp = getLastValidPosition(pos.begin, true);\n            if (lvp < pos.begin || pos.begin === -1) {\n                getMaskSet().p = seekNext(lvp);\n            } else if (strict !== true) {\n                getMaskSet().p = pos.begin;\n                if (fromIsValid !== true) {\n                    while (getMaskSet().p < lvp && getMaskSet().validPositions[getMaskSet().p] === undefined) {\n                        getMaskSet().p++;\n                    }\n                }\n            }\n        }\n        function initializeColorMask(input) {\n            var computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null);\n            function findCaretPos(clientx) {\n                var e = document.createElement(\"span\"), caretPos;\n                for (var style in computedStyle) {\n                    if (isNaN(style) && style.indexOf(\"font\") !== -1) {\n                        e.style[style] = computedStyle[style];\n                    }\n                }\n                e.style.textTransform = computedStyle.textTransform;\n                e.style.letterSpacing = computedStyle.letterSpacing;\n                e.style.position = \"absolute\";\n                e.style.height = \"auto\";\n                e.style.width = \"auto\";\n                e.style.visibility = \"hidden\";\n                e.style.whiteSpace = \"nowrap\";\n                document.body.appendChild(e);\n                var inputText = input.inputmask._valueGet(), previousWidth = 0, itl;\n                for (caretPos = 0, itl = inputText.length; caretPos <= itl; caretPos++) {\n                    e.innerHTML += inputText.charAt(caretPos) || \"_\";\n                    if (e.offsetWidth >= clientx) {\n                        var offset1 = clientx - previousWidth;\n                        var offset2 = e.offsetWidth - clientx;\n                        e.innerHTML = inputText.charAt(caretPos);\n                        offset1 -= e.offsetWidth / 3;\n                        caretPos = offset1 < offset2 ? caretPos - 1 : caretPos;\n                        break;\n                    }\n                    previousWidth = e.offsetWidth;\n                }\n                document.body.removeChild(e);\n                return caretPos;\n            }\n            var template = document.createElement(\"div\");\n            template.style.width = computedStyle.width;\n            template.style.textAlign = computedStyle.textAlign;\n            colorMask = document.createElement(\"div\");\n            input.inputmask.colorMask = colorMask;\n            colorMask.className = \"im-colormask\";\n            input.parentNode.insertBefore(colorMask, input);\n            input.parentNode.removeChild(input);\n            colorMask.appendChild(input);\n            colorMask.appendChild(template);\n            input.style.left = template.offsetLeft + \"px\";\n            $(colorMask).on(\"mouseleave\", function(e) {\n                return EventHandlers.mouseleaveEvent.call(input, [ e ]);\n            });\n            $(colorMask).on(\"mouseenter\", function(e) {\n                return EventHandlers.mouseenterEvent.call(input, [ e ]);\n            });\n            $(colorMask).on(\"click\", function(e) {\n                caret(input, findCaretPos(e.clientX));\n                return EventHandlers.clickEvent.call(input, [ e ]);\n            });\n        }\n        Inputmask.prototype.positionColorMask = function(input, template) {\n            input.style.left = template.offsetLeft + \"px\";\n        };\n        function renderColorMask(input, caretPos, clear) {\n            var maskTemplate = [], isStatic = false, test, testPos, ndxIntlzr, pos = 0;\n            function setEntry(entry) {\n                if (entry === undefined) entry = \"\";\n                if (!isStatic && (test.fn === null || testPos.input === undefined)) {\n                    isStatic = true;\n                    maskTemplate.push(\"<span class='im-static'>\" + entry);\n                } else if (isStatic && (test.fn !== null && testPos.input !== undefined || test.def === \"\")) {\n                    isStatic = false;\n                    var mtl = maskTemplate.length;\n                    maskTemplate[mtl - 1] = maskTemplate[mtl - 1] + \"</span>\";\n                    maskTemplate.push(entry);\n                } else maskTemplate.push(entry);\n            }\n            function setCaret() {\n                if (document.activeElement === input) {\n                    maskTemplate.splice(caretPos.begin, 0, caretPos.begin === caretPos.end || caretPos.end > getMaskSet().maskLength ? '<mark class=\"im-caret\" style=\"border-right-width: 1px;border-right-style: solid;\">' : '<mark class=\"im-caret-select\">');\n                    maskTemplate.splice(caretPos.end + 1, 0, \"</mark>\");\n                }\n            }\n            if (colorMask !== undefined) {\n                var buffer = getBuffer();\n                if (caretPos === undefined) {\n                    caretPos = caret(input);\n                } else if (caretPos.begin === undefined) {\n                    caretPos = {\n                        begin: caretPos,\n                        end: caretPos\n                    };\n                }\n                if (clear !== true) {\n                    var lvp = getLastValidPosition();\n                    do {\n                        if (getMaskSet().validPositions[pos]) {\n                            testPos = getMaskSet().validPositions[pos];\n                            test = testPos.match;\n                            ndxIntlzr = testPos.locator.slice();\n                            setEntry(buffer[pos]);\n                        } else {\n                            testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);\n                            test = testPos.match;\n                            ndxIntlzr = testPos.locator.slice();\n                            if (opts.jitMasking === false || pos < lvp || typeof opts.jitMasking === \"number\" && isFinite(opts.jitMasking) && opts.jitMasking > pos) {\n                                setEntry(getPlaceholder(pos, test));\n                            } else isStatic = false;\n                        }\n                        pos++;\n                    } while ((maxLength === undefined || pos < maxLength) && (test.fn !== null || test.def !== \"\") || lvp > pos || isStatic);\n                    if (isStatic) setEntry();\n                    setCaret();\n                }\n                var template = colorMask.getElementsByTagName(\"div\")[0];\n                template.innerHTML = maskTemplate.join(\"\");\n                input.inputmask.positionColorMask(input, template);\n            }\n        }\n        function mask(elem) {\n            function isElementTypeSupported(input, opts) {\n                function patchValueProperty(npt) {\n                    var valueGet;\n                    var valueSet;\n                    function patchValhook(type) {\n                        if ($.valHooks && ($.valHooks[type] === undefined || $.valHooks[type].inputmaskpatch !== true)) {\n                            var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function(elem) {\n                                return elem.value;\n                            };\n                            var valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function(elem, value) {\n                                elem.value = value;\n                                return elem;\n                            };\n                            $.valHooks[type] = {\n                                get: function(elem) {\n                                    if (elem.inputmask) {\n                                        if (elem.inputmask.opts.autoUnmask) {\n                                            return elem.inputmask.unmaskedvalue();\n                                        } else {\n                                            var result = valhookGet(elem);\n                                            return getLastValidPosition(undefined, undefined, elem.inputmask.maskset.validPositions) !== -1 || opts.nullable !== true ? result : \"\";\n                                        }\n                                    } else return valhookGet(elem);\n                                },\n                                set: function(elem, value) {\n                                    var $elem = $(elem), result;\n                                    result = valhookSet(elem, value);\n                                    if (elem.inputmask) {\n                                        $elem.trigger(\"setvalue\", [ value ]);\n                                    }\n                                    return result;\n                                },\n                                inputmaskpatch: true\n                            };\n                        }\n                    }\n                    function getter() {\n                        if (this.inputmask) {\n                            return this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : getLastValidPosition() !== -1 || opts.nullable !== true ? document.activeElement === this && opts.clearMaskOnLostFocus ? (isRTL ? clearOptionalTail(getBuffer().slice()).reverse() : clearOptionalTail(getBuffer().slice())).join(\"\") : valueGet.call(this) : \"\";\n                        } else return valueGet.call(this);\n                    }\n                    function setter(value) {\n                        valueSet.call(this, value);\n                        if (this.inputmask) {\n                            $(this).trigger(\"setvalue\", [ value ]);\n                        }\n                    }\n                    function installNativeValueSetFallback(npt) {\n                        EventRuler.on(npt, \"mouseenter\", function(event) {\n                            var $input = $(this), input = this, value = input.inputmask._valueGet();\n                            if (value !== getBuffer().join(\"\")) {\n                                $input.trigger(\"setvalue\");\n                            }\n                        });\n                    }\n                    if (!npt.inputmask.__valueGet) {\n                        if (opts.noValuePatching !== true) {\n                            if (Object.getOwnPropertyDescriptor) {\n                                if (typeof Object.getPrototypeOf !== \"function\") {\n                                    Object.getPrototypeOf = typeof \"test\".__proto__ === \"object\" ? function(object) {\n                                        return object.__proto__;\n                                    } : function(object) {\n                                        return object.constructor.prototype;\n                                    };\n                                }\n                                var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), \"value\") : undefined;\n                                if (valueProperty && valueProperty.get && valueProperty.set) {\n                                    valueGet = valueProperty.get;\n                                    valueSet = valueProperty.set;\n                                    Object.defineProperty(npt, \"value\", {\n                                        get: getter,\n                                        set: setter,\n                                        configurable: true\n                                    });\n                                } else if (npt.tagName !== \"INPUT\") {\n                                    valueGet = function() {\n                                        return this.textContent;\n                                    };\n                                    valueSet = function(value) {\n                                        this.textContent = value;\n                                    };\n                                    Object.defineProperty(npt, \"value\", {\n                                        get: getter,\n                                        set: setter,\n                                        configurable: true\n                                    });\n                                }\n                            } else if (document.__lookupGetter__ && npt.__lookupGetter__(\"value\")) {\n                                valueGet = npt.__lookupGetter__(\"value\");\n                                valueSet = npt.__lookupSetter__(\"value\");\n                                npt.__defineGetter__(\"value\", getter);\n                                npt.__defineSetter__(\"value\", setter);\n                            }\n                            npt.inputmask.__valueGet = valueGet;\n                            npt.inputmask.__valueSet = valueSet;\n                        }\n                        npt.inputmask._valueGet = function(overruleRTL) {\n                            return isRTL && overruleRTL !== true ? valueGet.call(this.el).split(\"\").reverse().join(\"\") : valueGet.call(this.el);\n                        };\n                        npt.inputmask._valueSet = function(value, overruleRTL) {\n                            valueSet.call(this.el, value === null || value === undefined ? \"\" : overruleRTL !== true && isRTL ? value.split(\"\").reverse().join(\"\") : value);\n                        };\n                        if (valueGet === undefined) {\n                            valueGet = function() {\n                                return this.value;\n                            };\n                            valueSet = function(value) {\n                                this.value = value;\n                            };\n                            patchValhook(npt.type);\n                            installNativeValueSetFallback(npt);\n                        }\n                    }\n                }\n                var elementType = input.getAttribute(\"type\");\n                var isSupported = input.tagName === \"INPUT\" && $.inArray(elementType, opts.supportsInputType) !== -1 || input.isContentEditable || input.tagName === \"TEXTAREA\";\n                if (!isSupported) {\n                    if (input.tagName === \"INPUT\") {\n                        var el = document.createElement(\"input\");\n                        el.setAttribute(\"type\", elementType);\n                        isSupported = el.type === \"text\";\n                        el = null;\n                    } else isSupported = \"partial\";\n                }\n                if (isSupported !== false) {\n                    patchValueProperty(input);\n                } else input.inputmask = undefined;\n                return isSupported;\n            }\n            EventRuler.off(elem);\n            var isSupported = isElementTypeSupported(elem, opts);\n            if (isSupported !== false) {\n                el = elem;\n                $el = $(el);\n                originalPlaceholder = el.placeholder;\n                maxLength = el !== undefined ? el.maxLength : undefined;\n                if (maxLength === -1) maxLength = undefined;\n                if (opts.colorMask === true) {\n                    initializeColorMask(el);\n                }\n                if (mobile) {\n                    if (\"inputmode\" in el) {\n                        el.inputmode = opts.inputmode;\n                        el.setAttribute(\"inputmode\", opts.inputmode);\n                    }\n                    if (opts.disablePredictiveText === true) {\n                        if (\"autocorrect\" in el) {\n                            el.autocorrect = false;\n                        } else {\n                            if (opts.colorMask !== true) {\n                                initializeColorMask(el);\n                            }\n                            el.type = \"password\";\n                        }\n                    }\n                }\n                if (isSupported === true) {\n                    el.setAttribute(\"im-insert\", opts.insertMode);\n                    EventRuler.on(el, \"submit\", EventHandlers.submitEvent);\n                    EventRuler.on(el, \"reset\", EventHandlers.resetEvent);\n                    EventRuler.on(el, \"blur\", EventHandlers.blurEvent);\n                    EventRuler.on(el, \"focus\", EventHandlers.focusEvent);\n                    if (opts.colorMask !== true) {\n                        EventRuler.on(el, \"click\", EventHandlers.clickEvent);\n                        EventRuler.on(el, \"mouseleave\", EventHandlers.mouseleaveEvent);\n                        EventRuler.on(el, \"mouseenter\", EventHandlers.mouseenterEvent);\n                    }\n                    EventRuler.on(el, \"paste\", EventHandlers.pasteEvent);\n                    EventRuler.on(el, \"cut\", EventHandlers.cutEvent);\n                    EventRuler.on(el, \"complete\", opts.oncomplete);\n                    EventRuler.on(el, \"incomplete\", opts.onincomplete);\n                    EventRuler.on(el, \"cleared\", opts.oncleared);\n                    if (!mobile && opts.inputEventOnly !== true) {\n                        EventRuler.on(el, \"keydown\", EventHandlers.keydownEvent);\n                        EventRuler.on(el, \"keypress\", EventHandlers.keypressEvent);\n                    } else {\n                        el.removeAttribute(\"maxLength\");\n                    }\n                    EventRuler.on(el, \"input\", EventHandlers.inputFallBackEvent);\n                    EventRuler.on(el, \"beforeinput\", EventHandlers.beforeInputEvent);\n                }\n                EventRuler.on(el, \"setvalue\", EventHandlers.setValueEvent);\n                undoValue = getBufferTemplate().join(\"\");\n                if (el.inputmask._valueGet(true) !== \"\" || opts.clearMaskOnLostFocus === false || document.activeElement === el) {\n                    var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, el.inputmask._valueGet(true), opts) || el.inputmask._valueGet(true) : el.inputmask._valueGet(true);\n                    if (initialValue !== \"\") checkVal(el, true, false, initialValue.split(\"\"));\n                    var buffer = getBuffer().slice();\n                    undoValue = buffer.join(\"\");\n                    if (isComplete(buffer) === false) {\n                        if (opts.clearIncomplete) {\n                            resetMaskSet();\n                        }\n                    }\n                    if (opts.clearMaskOnLostFocus && document.activeElement !== el) {\n                        if (getLastValidPosition() === -1) {\n                            buffer = [];\n                        } else {\n                            clearOptionalTail(buffer);\n                        }\n                    }\n                    if (opts.clearMaskOnLostFocus === false || opts.showMaskOnFocus && document.activeElement === el || el.inputmask._valueGet(true) !== \"\") writeBuffer(el, buffer);\n                    if (document.activeElement === el) {\n                        caret(el, seekNext(getLastValidPosition()));\n                    }\n                }\n            }\n        }\n        var valueBuffer;\n        if (actionObj !== undefined) {\n            switch (actionObj.action) {\n              case \"isComplete\":\n                el = actionObj.el;\n                return isComplete(getBuffer());\n\n              case \"unmaskedvalue\":\n                if (el === undefined || actionObj.value !== undefined) {\n                    valueBuffer = actionObj.value;\n                    valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, valueBuffer, opts) || valueBuffer : valueBuffer).split(\"\");\n                    checkVal.call(this, undefined, false, false, valueBuffer);\n                    if ($.isFunction(opts.onBeforeWrite)) opts.onBeforeWrite.call(inputmask, undefined, getBuffer(), 0, opts);\n                }\n                return unmaskedvalue(el);\n\n              case \"mask\":\n                mask(el);\n                break;\n\n              case \"format\":\n                valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, actionObj.value, opts) || actionObj.value : actionObj.value).split(\"\");\n                checkVal.call(this, undefined, true, false, valueBuffer);\n                if (actionObj.metadata) {\n                    return {\n                        value: isRTL ? getBuffer().slice().reverse().join(\"\") : getBuffer().join(\"\"),\n                        metadata: maskScope.call(this, {\n                            action: \"getmetadata\"\n                        }, maskset, opts)\n                    };\n                }\n                return isRTL ? getBuffer().slice().reverse().join(\"\") : getBuffer().join(\"\");\n\n              case \"isValid\":\n                if (actionObj.value) {\n                    valueBuffer = actionObj.value.split(\"\");\n                    checkVal.call(this, undefined, true, true, valueBuffer);\n                } else {\n                    actionObj.value = getBuffer().join(\"\");\n                }\n                var buffer = getBuffer();\n                var rl = determineLastRequiredPosition(), lmib = buffer.length - 1;\n                for (;lmib > rl; lmib--) {\n                    if (isMask(lmib)) break;\n                }\n                buffer.splice(rl, lmib + 1 - rl);\n                return isComplete(buffer) && actionObj.value === getBuffer().join(\"\");\n\n              case \"getemptymask\":\n                return getBufferTemplate().join(\"\");\n\n              case \"remove\":\n                if (el && el.inputmask) {\n                    $.data(el, \"_inputmask_opts\", null);\n                    $el = $(el);\n                    el.inputmask._valueSet(opts.autoUnmask ? unmaskedvalue(el) : el.inputmask._valueGet(true));\n                    EventRuler.off(el);\n                    if (el.inputmask.colorMask) {\n                        colorMask = el.inputmask.colorMask;\n                        colorMask.removeChild(el);\n                        colorMask.parentNode.insertBefore(el, colorMask);\n                        colorMask.parentNode.removeChild(colorMask);\n                    }\n                    var valueProperty;\n                    if (Object.getOwnPropertyDescriptor && Object.getPrototypeOf) {\n                        valueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(el), \"value\");\n                        if (valueProperty) {\n                            if (el.inputmask.__valueGet) {\n                                Object.defineProperty(el, \"value\", {\n                                    get: el.inputmask.__valueGet,\n                                    set: el.inputmask.__valueSet,\n                                    configurable: true\n                                });\n                            }\n                        }\n                    } else if (document.__lookupGetter__ && el.__lookupGetter__(\"value\")) {\n                        if (el.inputmask.__valueGet) {\n                            el.__defineGetter__(\"value\", el.inputmask.__valueGet);\n                            el.__defineSetter__(\"value\", el.inputmask.__valueSet);\n                        }\n                    }\n                    el.inputmask = undefined;\n                }\n                return el;\n                break;\n\n              case \"getmetadata\":\n                if ($.isArray(maskset.metadata)) {\n                    var maskTarget = getMaskTemplate(true, 0, false).join(\"\");\n                    $.each(maskset.metadata, function(ndx, mtdt) {\n                        if (mtdt.mask === maskTarget) {\n                            maskTarget = mtdt;\n                            return false;\n                        }\n                    });\n                    return maskTarget;\n                }\n                return maskset.metadata;\n            }\n        }\n    }\n    return Inputmask;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* global/window.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2018 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.2\n*/\n\nif (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n    return window;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof exports === \"object\") module.exports = window;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2dsb2JhbC93aW5kb3cuanM/YTUyZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLElBQTBDLEVBQUUsbUNBQU87QUFDdkQ7QUFDQSxDQUFDO0FBQUEsb0dBQUMsQ0FBQyIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4qIGdsb2JhbC93aW5kb3cuanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOCBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC4yXG4qL1xuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gd2luZG93O1xufSk7IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svZ2xvYmFsL3dpbmRvdy5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* global/document.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2018 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.2\n*/\n\nif (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n    return document;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof exports === \"object\") module.exports = document;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2dsb2JhbC9kb2N1bWVudC5qcz80ZGY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksSUFBMEMsRUFBRSxtQ0FBTztBQUN2RDtBQUNBLENBQUM7QUFBQSxvR0FBQyxDQUFDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiogZ2xvYmFsL2RvY3VtZW50LmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTggUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuMlxuKi9cblxuaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xufSk7IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSBtb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9kaXN0L2lucHV0bWFzay9nbG9iYWwvZG9jdW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_inputmask__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_inputmask___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_inputmask__);\n/*\n * vue-inputmask\n *\n * (C) 2016 Simon Clériot\n * MIT LICENCE\n *\n */\n\n\nvar inputmaskPlugin = {\n    install: function (Vue, options) {\n        Vue.directive('mask', {\n            bind: function (el, binding) {\n                __WEBPACK_IMPORTED_MODULE_0_inputmask___default()(binding.value).mask(el);\n            }\n        });\n    }\n};\n\nexports.default = inputmaskPlugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdnVlLWlucHV0bWFzay5qcz9hMmE5Il0sIm5hbWVzIjpbImlucHV0bWFza1BsdWdpbiIsImluc3RhbGwiLCJWdWUiLCJvcHRpb25zIiwiZGlyZWN0aXZlIiwiYmluZCIsImVsIiwiYmluZGluZyIsIklucHV0bWFzayIsInZhbHVlIiwibWFzayIsImV4cG9ydHMiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7OztBQU9BOztBQUVBLElBQUlBLGtCQUFrQjtBQUNsQkMsYUFBUyxVQUFTQyxHQUFULEVBQWNDLE9BQWQsRUFBdUI7QUFDNUJELFlBQUlFLFNBQUosQ0FBYyxNQUFkLEVBQXNCO0FBQ2xCQyxrQkFBTSxVQUFTQyxFQUFULEVBQWFDLE9BQWIsRUFBc0I7QUFDeEJDLGlFQUFTQSxDQUFDRCxRQUFRRSxLQUFsQixFQUF5QkMsSUFBekIsQ0FBOEJKLEVBQTlCO0FBQ0g7QUFIaUIsU0FBdEI7QUFLSDtBQVBpQixDQUF0Qjs7QUFVQUssUUFBUUMsT0FBUixHQUFrQlosZUFBbEIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB2dWUtaW5wdXRtYXNrXG4gKlxuICogKEMpIDIwMTYgU2ltb24gQ2zDqXJpb3RcbiAqIE1JVCBMSUNFTkNFXG4gKlxuICovXG5pbXBvcnQgSW5wdXRtYXNrIGZyb20gJ2lucHV0bWFzaydcblxudmFyIGlucHV0bWFza1BsdWdpbiA9IHtcbiAgICBpbnN0YWxsOiBmdW5jdGlvbihWdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgVnVlLmRpcmVjdGl2ZSgnbWFzaycsIHtcbiAgICAgICAgICAgIGJpbmQ6IGZ1bmN0aW9uKGVsLCBiaW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgSW5wdXRtYXNrKGJpbmRpbmcudmFsdWUpLm1hc2soZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBpbnB1dG1hc2tQbHVnaW5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdnVlLWlucHV0bWFzay5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(5);\n__webpack_require__(7);\n__webpack_require__(8);\n\nmodule.exports = __webpack_require__(0);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2luZGV4LmpzP2VlNjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQU8sQ0FBQyxDQUF1QztBQUMvQyxtQkFBTyxDQUFDLENBQTRDO0FBQ3BELG1CQUFPLENBQUMsQ0FBK0M7O0FBRXZELGlCQUFpQixtQkFBTyxDQUFDLENBQStCIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwiLi9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2suZXh0ZW5zaW9uc1wiKTtcbnJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5kYXRlLmV4dGVuc2lvbnNcIik7XG5yZXF1aXJlKFwiLi9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2subnVtZXJpYy5leHRlbnNpb25zXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5qc1wiKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* inputmask.extensions.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2018 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.2\n*/\n\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(0) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require(\"./inputmask\"));\n    } else {\n        factory(window.Inputmask);\n    }\n})(function(Inputmask) {\n    Inputmask.extendDefinitions({\n        A: {\n            validator: \"[A-Za-z\\u0410-\\u044f\\u0401\\u0451\\xc0-\\xff\\xb5]\",\n            casing: \"upper\"\n        },\n        \"&\": {\n            validator: \"[0-9A-Za-z\\u0410-\\u044f\\u0401\\u0451\\xc0-\\xff\\xb5]\",\n            casing: \"upper\"\n        },\n        \"#\": {\n            validator: \"[0-9A-Fa-f]\",\n            casing: \"upper\"\n        }\n    });\n    Inputmask.extendAliases({\n        cssunit: {\n            regex: \"[+-]?[0-9]+\\\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)\"\n        },\n        url: {\n            regex: \"(https?|ftp)//.*\",\n            autoUnmask: false\n        },\n        ip: {\n            mask: \"i[i[i]].i[i[i]].i[i[i]].i[i[i]]\",\n            definitions: {\n                i: {\n                    validator: function(chrs, maskset, pos, strict, opts) {\n                        if (pos - 1 > -1 && maskset.buffer[pos - 1] !== \".\") {\n                            chrs = maskset.buffer[pos - 1] + chrs;\n                            if (pos - 2 > -1 && maskset.buffer[pos - 2] !== \".\") {\n                                chrs = maskset.buffer[pos - 2] + chrs;\n                            } else chrs = \"0\" + chrs;\n                        } else chrs = \"00\" + chrs;\n                        return new RegExp(\"25[0-5]|2[0-4][0-9]|[01][0-9][0-9]\").test(chrs);\n                    }\n                }\n            },\n            onUnMask: function(maskedValue, unmaskedValue, opts) {\n                return maskedValue;\n            },\n            inputmode: \"numeric\"\n        },\n        email: {\n            mask: \"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]\",\n            greedy: false,\n            casing: \"lower\",\n            onBeforePaste: function(pastedValue, opts) {\n                pastedValue = pastedValue.toLowerCase();\n                return pastedValue.replace(\"mailto:\", \"\");\n            },\n            definitions: {\n                \"*\": {\n                    validator: \"[0-9\\uff11-\\uff19A-Za-z\\u0410-\\u044f\\u0401\\u0451\\xc0-\\xff\\xb5!#$%&'*+/=?^_`{|}~-]\"\n                },\n                \"-\": {\n                    validator: \"[0-9A-Za-z-]\"\n                }\n            },\n            onUnMask: function(maskedValue, unmaskedValue, opts) {\n                return maskedValue;\n            },\n            inputmode: \"email\"\n        },\n        mac: {\n            mask: \"##:##:##:##:##:##\"\n        },\n        vin: {\n            mask: \"V{13}9{4}\",\n            definitions: {\n                V: {\n                    validator: \"[A-HJ-NPR-Za-hj-npr-z\\\\d]\",\n                    casing: \"upper\"\n                }\n            },\n            clearIncomplete: true,\n            autoUnmask: true\n        }\n    });\n    return Inputmask;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5leHRlbnNpb25zLmpzPzY5NWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLElBQTBDO0FBQ2xELFFBQVEsaUNBQU8sRUFBRSxzQkFBYSxFQUFFLG9DQUFFLE9BQU87QUFBQTtBQUFBO0FBQUEsb0dBQUM7QUFDMUMsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBLHFCQUFxQixLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSztBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSw0R0FBNEcsRUFBRTtBQUM5RyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHFCQUFxQixHQUFHLEVBQUUsRUFBRTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuKiBpbnB1dG1hc2suZXh0ZW5zaW9ucy5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE4IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjJcbiovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbIFwiLi9pbnB1dG1hc2tcIiBdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9pbnB1dG1hc2tcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3Rvcnkod2luZG93LklucHV0bWFzayk7XG4gICAgfVxufSkoZnVuY3Rpb24oSW5wdXRtYXNrKSB7XG4gICAgSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zKHtcbiAgICAgICAgQToge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiZcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiNcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLUZhLWZdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9XG4gICAgfSk7XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBjc3N1bml0OiB7XG4gICAgICAgICAgICByZWdleDogXCJbKy1dP1swLTldK1xcXFwuPyhbMC05XSspPyhweHxlbXxyZW18ZXh8JXxpbnxjbXxtbXxwdHxwYylcIlxuICAgICAgICB9LFxuICAgICAgICB1cmw6IHtcbiAgICAgICAgICAgIHJlZ2V4OiBcIihodHRwcz98ZnRwKS8vLipcIixcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGlwOiB7XG4gICAgICAgICAgICBtYXNrOiBcImlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV1cIixcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgaToge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zIC0gMSA+IC0xICYmIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICE9PSBcIi5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocnMgPSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSArIGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyAtIDIgPiAtMSAmJiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2hycyA9IFwiMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjaHJzID0gXCIwMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XVwiKS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICBtYXNrOiBcIip7MSw2NH1bLip7MSw2NH1dWy4qezEsNjR9XVsuKnsxLDYzfV1ALXsxLDYzfS4tezEsNjN9Wy4tezEsNjN9XVsuLXsxLDYzfV1cIixcbiAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXG4gICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIixcbiAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgcGFzdGVkVmFsdWUgPSBwYXN0ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXN0ZWRWYWx1ZS5yZXBsYWNlKFwibWFpbHRvOlwiLCBcIlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1ISMkJSYnKisvPT9eX2B7fH1+LV1cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCItXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXotXVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwiZW1haWxcIlxuICAgICAgICB9LFxuICAgICAgICBtYWM6IHtcbiAgICAgICAgICAgIG1hc2s6IFwiIyM6IyM6IyM6IyM6IyM6IyNcIlxuICAgICAgICB9LFxuICAgICAgICB2aW46IHtcbiAgICAgICAgICAgIG1hc2s6IFwiVnsxM305ezR9XCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFY6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLUhKLU5QUi1aYS1oai1ucHItelxcXFxkXVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhckluY29tcGxldGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSW5wdXRtYXNrO1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5leHRlbnNpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* dependencyLibs/inputmask.dependencyLib.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2018 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.2\n*/\n\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1), __webpack_require__(2) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require(\"../global/window\"), require(\"../global/document\"));\n    } else {\n        window.dependencyLib = factory(window, document);\n    }\n})(function(window, document) {\n    function indexOf(list, elem) {\n        var i = 0, len = list.length;\n        for (;i < len; i++) {\n            if (list[i] === elem) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function isWindow(obj) {\n        return obj != null && obj === obj.window;\n    }\n    function isArraylike(obj) {\n        var length = \"length\" in obj && obj.length, ltype = typeof obj;\n        if (ltype === \"function\" || isWindow(obj)) {\n            return false;\n        }\n        if (obj.nodeType === 1 && length) {\n            return true;\n        }\n        return ltype === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n    }\n    function isValidElement(elem) {\n        return elem instanceof Element;\n    }\n    function DependencyLib(elem) {\n        if (elem instanceof DependencyLib) {\n            return elem;\n        }\n        if (!(this instanceof DependencyLib)) {\n            return new DependencyLib(elem);\n        }\n        if (elem !== undefined && elem !== null && elem !== window) {\n            this[0] = elem.nodeName ? elem : elem[0] !== undefined && elem[0].nodeName ? elem[0] : document.querySelector(elem);\n            if (this[0] !== undefined && this[0] !== null) {\n                this[0].eventRegistry = this[0].eventRegistry || {};\n            }\n        }\n    }\n    function getWindow(elem) {\n        return isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n    }\n    DependencyLib.prototype = {\n        on: function(events, handler) {\n            if (isValidElement(this[0])) {\n                var eventRegistry = this[0].eventRegistry, elem = this[0];\n                function addEvent(ev, namespace) {\n                    if (elem.addEventListener) {\n                        elem.addEventListener(ev, handler, false);\n                    } else if (elem.attachEvent) {\n                        elem.attachEvent(\"on\" + ev, handler);\n                    }\n                    eventRegistry[ev] = eventRegistry[ev] || {};\n                    eventRegistry[ev][namespace] = eventRegistry[ev][namespace] || [];\n                    eventRegistry[ev][namespace].push(handler);\n                }\n                var _events = events.split(\" \");\n                for (var endx = 0; endx < _events.length; endx++) {\n                    var nsEvent = _events[endx].split(\".\"), ev = nsEvent[0], namespace = nsEvent[1] || \"global\";\n                    addEvent(ev, namespace);\n                }\n            }\n            return this;\n        },\n        off: function(events, handler) {\n            if (isValidElement(this[0])) {\n                var eventRegistry = this[0].eventRegistry, elem = this[0];\n                function removeEvent(ev, namespace, handler) {\n                    if (ev in eventRegistry === true) {\n                        if (elem.removeEventListener) {\n                            elem.removeEventListener(ev, handler, false);\n                        } else if (elem.detachEvent) {\n                            elem.detachEvent(\"on\" + ev, handler);\n                        }\n                        if (namespace === \"global\") {\n                            for (var nmsp in eventRegistry[ev]) {\n                                eventRegistry[ev][nmsp].splice(eventRegistry[ev][nmsp].indexOf(handler), 1);\n                            }\n                        } else {\n                            eventRegistry[ev][namespace].splice(eventRegistry[ev][namespace].indexOf(handler), 1);\n                        }\n                    }\n                }\n                function resolveNamespace(ev, namespace) {\n                    var evts = [], hndx, hndL;\n                    if (ev.length > 0) {\n                        if (handler === undefined) {\n                            for (hndx = 0, hndL = eventRegistry[ev][namespace].length; hndx < hndL; hndx++) {\n                                evts.push({\n                                    ev: ev,\n                                    namespace: namespace && namespace.length > 0 ? namespace : \"global\",\n                                    handler: eventRegistry[ev][namespace][hndx]\n                                });\n                            }\n                        } else {\n                            evts.push({\n                                ev: ev,\n                                namespace: namespace && namespace.length > 0 ? namespace : \"global\",\n                                handler: handler\n                            });\n                        }\n                    } else if (namespace.length > 0) {\n                        for (var evNdx in eventRegistry) {\n                            for (var nmsp in eventRegistry[evNdx]) {\n                                if (nmsp === namespace) {\n                                    if (handler === undefined) {\n                                        for (hndx = 0, hndL = eventRegistry[evNdx][nmsp].length; hndx < hndL; hndx++) {\n                                            evts.push({\n                                                ev: evNdx,\n                                                namespace: nmsp,\n                                                handler: eventRegistry[evNdx][nmsp][hndx]\n                                            });\n                                        }\n                                    } else {\n                                        evts.push({\n                                            ev: evNdx,\n                                            namespace: nmsp,\n                                            handler: handler\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    return evts;\n                }\n                var _events = events.split(\" \");\n                for (var endx = 0; endx < _events.length; endx++) {\n                    var nsEvent = _events[endx].split(\".\"), offEvents = resolveNamespace(nsEvent[0], nsEvent[1]);\n                    for (var i = 0, offEventsL = offEvents.length; i < offEventsL; i++) {\n                        removeEvent(offEvents[i].ev, offEvents[i].namespace, offEvents[i].handler);\n                    }\n                }\n            }\n            return this;\n        },\n        trigger: function(events) {\n            if (isValidElement(this[0])) {\n                var eventRegistry = this[0].eventRegistry, elem = this[0];\n                var _events = typeof events === \"string\" ? events.split(\" \") : [ events.type ];\n                for (var endx = 0; endx < _events.length; endx++) {\n                    var nsEvent = _events[endx].split(\".\"), ev = nsEvent[0], namespace = nsEvent[1] || \"global\";\n                    if (document !== undefined && namespace === \"global\") {\n                        var evnt, i, params = {\n                            bubbles: true,\n                            cancelable: true,\n                            detail: arguments[1]\n                        };\n                        if (document.createEvent) {\n                            try {\n                                evnt = new CustomEvent(ev, params);\n                            } catch (e) {\n                                evnt = document.createEvent(\"CustomEvent\");\n                                evnt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n                            }\n                            if (events.type) DependencyLib.extend(evnt, events);\n                            elem.dispatchEvent(evnt);\n                        } else {\n                            evnt = document.createEventObject();\n                            evnt.eventType = ev;\n                            evnt.detail = arguments[1];\n                            if (events.type) DependencyLib.extend(evnt, events);\n                            elem.fireEvent(\"on\" + evnt.eventType, evnt);\n                        }\n                    } else if (eventRegistry[ev] !== undefined) {\n                        arguments[0] = arguments[0].type ? arguments[0] : DependencyLib.Event(arguments[0]);\n                        if (namespace === \"global\") {\n                            for (var nmsp in eventRegistry[ev]) {\n                                for (i = 0; i < eventRegistry[ev][nmsp].length; i++) {\n                                    eventRegistry[ev][nmsp][i].apply(elem, arguments);\n                                }\n                            }\n                        } else {\n                            for (i = 0; i < eventRegistry[ev][namespace].length; i++) {\n                                eventRegistry[ev][namespace][i].apply(elem, arguments);\n                            }\n                        }\n                    }\n                }\n            }\n            return this;\n        }\n    };\n    DependencyLib.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n    DependencyLib.noop = function() {};\n    DependencyLib.isArray = Array.isArray;\n    DependencyLib.inArray = function(elem, arr, i) {\n        return arr == null ? -1 : indexOf(arr, elem, i);\n    };\n    DependencyLib.valHooks = undefined;\n    DependencyLib.isPlainObject = function(obj) {\n        if (typeof obj !== \"object\" || obj.nodeType || isWindow(obj)) {\n            return false;\n        }\n        if (obj.constructor && !Object.hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n            return false;\n        }\n        return true;\n    };\n    DependencyLib.extend = function() {\n        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;\n        if (typeof target === \"boolean\") {\n            deep = target;\n            target = arguments[i] || {};\n            i++;\n        }\n        if (typeof target !== \"object\" && !DependencyLib.isFunction(target)) {\n            target = {};\n        }\n        if (i === length) {\n            target = this;\n            i--;\n        }\n        for (;i < length; i++) {\n            if ((options = arguments[i]) != null) {\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n                    if (target === copy) {\n                        continue;\n                    }\n                    if (deep && copy && (DependencyLib.isPlainObject(copy) || (copyIsArray = DependencyLib.isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && DependencyLib.isArray(src) ? src : [];\n                        } else {\n                            clone = src && DependencyLib.isPlainObject(src) ? src : {};\n                        }\n                        target[name] = DependencyLib.extend(deep, clone, copy);\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n        return target;\n    };\n    DependencyLib.each = function(obj, callback) {\n        var value, i = 0;\n        if (isArraylike(obj)) {\n            for (var length = obj.length; i < length; i++) {\n                value = callback.call(obj[i], i, obj[i]);\n                if (value === false) {\n                    break;\n                }\n            }\n        } else {\n            for (i in obj) {\n                value = callback.call(obj[i], i, obj[i]);\n                if (value === false) {\n                    break;\n                }\n            }\n        }\n        return obj;\n    };\n    DependencyLib.data = function(owner, key, value) {\n        if (value === undefined) {\n            return owner.__data ? owner.__data[key] : null;\n        } else {\n            owner.__data = owner.__data || {};\n            owner.__data[key] = value;\n        }\n    };\n    if (typeof window.CustomEvent === \"function\") {\n        DependencyLib.Event = window.CustomEvent;\n    } else {\n        DependencyLib.Event = function(event, params) {\n            params = params || {\n                bubbles: false,\n                cancelable: false,\n                detail: undefined\n            };\n            var evt = document.createEvent(\"CustomEvent\");\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n            return evt;\n        };\n        DependencyLib.Event.prototype = window.Event.prototype;\n    }\n    return DependencyLib;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2RlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliLmpzPzczMWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLElBQTBDO0FBQ2xELFFBQVEsaUNBQU8sRUFBRSxzQkFBa0IsRUFBRSxzQkFBb0IsRUFBRSxvQ0FBRSxPQUFPO0FBQUE7QUFBQTtBQUFBLG9HQUFDO0FBQ3JFLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsdUJBQXVCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsYUFBYTtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdHQUFnRyxhQUFhO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsdUJBQXVCO0FBQ3pEO0FBQ0Esa0VBQWtFLGdCQUFnQjtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHVCQUF1QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsb0NBQW9DO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6Qix1Q0FBdUMseUNBQXlDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxZQUFZO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuKiBkZXBlbmRlbmN5TGlicy9pbnB1dG1hc2suZGVwZW5kZW5jeUxpYi5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE4IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjJcbiovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbIFwiLi4vZ2xvYmFsL3dpbmRvd1wiLCBcIi4uL2dsb2JhbC9kb2N1bWVudFwiIF0sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuLi9nbG9iYWwvd2luZG93XCIpLCByZXF1aXJlKFwiLi4vZ2xvYmFsL2RvY3VtZW50XCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuZGVwZW5kZW5jeUxpYiA9IGZhY3Rvcnkod2luZG93LCBkb2N1bWVudCk7XG4gICAgfVxufSkoZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCkge1xuICAgIGZ1bmN0aW9uIGluZGV4T2YobGlzdCwgZWxlbSkge1xuICAgICAgICB2YXIgaSA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoO1xuICAgICAgICBmb3IgKDtpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChsaXN0W2ldID09PSBlbGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNBcnJheWxpa2Uob2JqKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLCBsdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgICAgIGlmIChsdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGlzV2luZG93KG9iaikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGx0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8IHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiBsZW5ndGggLSAxIGluIG9iajtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQoZWxlbSkge1xuICAgICAgICByZXR1cm4gZWxlbSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIERlcGVuZGVuY3lMaWIoZWxlbSkge1xuICAgICAgICBpZiAoZWxlbSBpbnN0YW5jZW9mIERlcGVuZGVuY3lMaWIpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZXBlbmRlbmN5TGliKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEZXBlbmRlbmN5TGliKGVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtICE9PSB1bmRlZmluZWQgJiYgZWxlbSAhPT0gbnVsbCAmJiBlbGVtICE9PSB3aW5kb3cpIHtcbiAgICAgICAgICAgIHRoaXNbMF0gPSBlbGVtLm5vZGVOYW1lID8gZWxlbSA6IGVsZW1bMF0gIT09IHVuZGVmaW5lZCAmJiBlbGVtWzBdLm5vZGVOYW1lID8gZWxlbVswXSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbSk7XG4gICAgICAgICAgICBpZiAodGhpc1swXSAhPT0gdW5kZWZpbmVkICYmIHRoaXNbMF0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzWzBdLmV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnkgfHwge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0V2luZG93KGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIGlzV2luZG93KGVsZW0pID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgPyBlbGVtLmRlZmF1bHRWaWV3IHx8IGVsZW0ucGFyZW50V2luZG93IDogZmFsc2U7XG4gICAgfVxuICAgIERlcGVuZGVuY3lMaWIucHJvdG90eXBlID0ge1xuICAgICAgICBvbjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQodGhpc1swXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRSZWdpc3RyeSA9IHRoaXNbMF0uZXZlbnRSZWdpc3RyeSwgZWxlbSA9IHRoaXNbMF07XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYWRkRXZlbnQoZXYsIG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoZXYsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmF0dGFjaEV2ZW50KFwib25cIiArIGV2LCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBldmVudFJlZ2lzdHJ5W2V2XSA9IGV2ZW50UmVnaXN0cnlbZXZdIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdID0gZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgX2V2ZW50cyA9IGV2ZW50cy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZW5keCA9IDA7IGVuZHggPCBfZXZlbnRzLmxlbmd0aDsgZW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuc0V2ZW50ID0gX2V2ZW50c1tlbmR4XS5zcGxpdChcIi5cIiksIGV2ID0gbnNFdmVudFswXSwgbmFtZXNwYWNlID0gbnNFdmVudFsxXSB8fCBcImdsb2JhbFwiO1xuICAgICAgICAgICAgICAgICAgICBhZGRFdmVudChldiwgbmFtZXNwYWNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgb2ZmOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudCh0aGlzWzBdKSkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5LCBlbGVtID0gdGhpc1swXTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVFdmVudChldiwgbmFtZXNwYWNlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldiBpbiBldmVudFJlZ2lzdHJ5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW0uZGV0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRldGFjaEV2ZW50KFwib25cIiArIGV2LCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgPT09IFwiZ2xvYmFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBubXNwIGluIGV2ZW50UmVnaXN0cnlbZXZdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLnNwbGljZShldmVudFJlZ2lzdHJ5W2V2XVtubXNwXS5pbmRleE9mKGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uaW5kZXhPZihoYW5kbGVyKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZU5hbWVzcGFjZShldiwgbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldnRzID0gW10sIGhuZHgsIGhuZEw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChobmR4ID0gMCwgaG5kTCA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBobmR4IDwgaG5kTDsgaG5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldjogZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXZOZHggaW4gZXZlbnRSZWdpc3RyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldk5keF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5tc3AgPT09IG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaG5keCA9IDAsIGhuZEwgPSBldmVudFJlZ2lzdHJ5W2V2TmR4XVtubXNwXS5sZW5ndGg7IGhuZHggPCBobmRMOyBobmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2OiBldk5keCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbm1zcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGV2ZW50UmVnaXN0cnlbZXZOZHhdW25tc3BdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2TmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5tc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZ0cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIF9ldmVudHMgPSBldmVudHMuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGVuZHggPSAwOyBlbmR4IDwgX2V2ZW50cy5sZW5ndGg7IGVuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnNFdmVudCA9IF9ldmVudHNbZW5keF0uc3BsaXQoXCIuXCIpLCBvZmZFdmVudHMgPSByZXNvbHZlTmFtZXNwYWNlKG5zRXZlbnRbMF0sIG5zRXZlbnRbMV0pO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgb2ZmRXZlbnRzTCA9IG9mZkV2ZW50cy5sZW5ndGg7IGkgPCBvZmZFdmVudHNMOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50KG9mZkV2ZW50c1tpXS5ldiwgb2ZmRXZlbnRzW2ldLm5hbWVzcGFjZSwgb2ZmRXZlbnRzW2ldLmhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKGV2ZW50cykge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBfZXZlbnRzID0gdHlwZW9mIGV2ZW50cyA9PT0gXCJzdHJpbmdcIiA/IGV2ZW50cy5zcGxpdChcIiBcIikgOiBbIGV2ZW50cy50eXBlIF07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZW5keCA9IDA7IGVuZHggPCBfZXZlbnRzLmxlbmd0aDsgZW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuc0V2ZW50ID0gX2V2ZW50c1tlbmR4XS5zcGxpdChcIi5cIiksIGV2ID0gbnNFdmVudFswXSwgbmFtZXNwYWNlID0gbnNFdmVudFsxXSB8fCBcImdsb2JhbFwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQgIT09IHVuZGVmaW5lZCAmJiBuYW1lc3BhY2UgPT09IFwiZ2xvYmFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldm50LCBpLCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDogYXJndW1lbnRzWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudCA9IG5ldyBDdXN0b21FdmVudChldiwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50LmluaXRDdXN0b21FdmVudChldiwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cy50eXBlKSBEZXBlbmRlbmN5TGliLmV4dGVuZChldm50LCBldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZGlzcGF0Y2hFdmVudChldm50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudC5ldmVudFR5cGUgPSBldjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50LmRldGFpbCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLnR5cGUpIERlcGVuZGVuY3lMaWIuZXh0ZW5kKGV2bnQsIGV2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5maXJlRXZlbnQoXCJvblwiICsgZXZudC5ldmVudFR5cGUsIGV2bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50UmVnaXN0cnlbZXZdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IGFyZ3VtZW50c1swXS50eXBlID8gYXJndW1lbnRzWzBdIDogRGVwZW5kZW5jeUxpYi5FdmVudChhcmd1bWVudHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJnbG9iYWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFJlZ2lzdHJ5W2V2XVtubXNwXVtpXS5hcHBseShlbGVtLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2ldLmFwcGx5KGVsZW0sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5ub29wID0gZnVuY3Rpb24oKSB7fTtcbiAgICBEZXBlbmRlbmN5TGliLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuICAgIERlcGVuZGVuY3lMaWIuaW5BcnJheSA9IGZ1bmN0aW9uKGVsZW0sIGFyciwgaSkge1xuICAgICAgICByZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YoYXJyLCBlbGVtLCBpKTtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIudmFsSG9va3MgPSB1bmRlZmluZWQ7XG4gICAgRGVwZW5kZW5jeUxpYi5pc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBpc1dpbmRvdyhvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgXCJpc1Byb3RvdHlwZU9mXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsIHRhcmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSwgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIGRlZXAgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICBkZWVwID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldIHx8IHt9O1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFEZXBlbmRlbmN5TGliLmlzRnVuY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcztcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDtpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgob3B0aW9ucyA9IGFyZ3VtZW50c1tpXSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHNyYyA9IHRhcmdldFtuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IG9wdGlvbnNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IGNvcHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWVwICYmIGNvcHkgJiYgKERlcGVuZGVuY3lMaWIuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBEZXBlbmRlbmN5TGliLmlzQXJyYXkoY29weSkpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHlJc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weUlzQXJyYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBEZXBlbmRlbmN5TGliLmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBEZXBlbmRlbmN5TGliLmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gRGVwZW5kZW5jeUxpYi5leHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvcHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gY29weTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5lYWNoID0gZnVuY3Rpb24ob2JqLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdmFsdWUsIGkgPSAwO1xuICAgICAgICBpZiAoaXNBcnJheWxpa2Uob2JqKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmNhbGwob2JqW2ldLCBpLCBvYmpbaV0pO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLmRhdGEgPSBmdW5jdGlvbihvd25lciwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG93bmVyLl9fZGF0YSA/IG93bmVyLl9fZGF0YVtrZXldIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG93bmVyLl9fZGF0YSA9IG93bmVyLl9fZGF0YSB8fCB7fTtcbiAgICAgICAgICAgIG93bmVyLl9fZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgRGVwZW5kZW5jeUxpYi5FdmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBEZXBlbmRlbmN5TGliLkV2ZW50ID0gZnVuY3Rpb24oZXZlbnQsIHBhcmFtcykge1xuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtcbiAgICAgICAgICAgICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgICAgIHJldHVybiBldnQ7XG4gICAgICAgIH07XG4gICAgICAgIERlcGVuZGVuY3lMaWIuRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIERlcGVuZGVuY3lMaWI7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svZGVwZW5kZW5jeUxpYnMvaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWIuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* inputmask.date.extensions.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2018 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.2\n*/\n\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(0) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require(\"./inputmask\"));\n    } else {\n        factory(window.Inputmask);\n    }\n})(function(Inputmask) {\n    var $ = Inputmask.dependencyLib;\n    var formatCode = {\n        d: [ \"[1-9]|[12][0-9]|3[01]\", Date.prototype.setDate, \"day\", Date.prototype.getDate ],\n        dd: [ \"0[1-9]|[12][0-9]|3[01]\", Date.prototype.setDate, \"day\", function() {\n            return pad(Date.prototype.getDate.call(this), 2);\n        } ],\n        ddd: [ \"\" ],\n        dddd: [ \"\" ],\n        m: [ \"[1-9]|1[012]\", Date.prototype.setMonth, \"month\", function() {\n            return Date.prototype.getMonth.call(this) + 1;\n        } ],\n        mm: [ \"0[1-9]|1[012]\", Date.prototype.setMonth, \"month\", function() {\n            return pad(Date.prototype.getMonth.call(this) + 1, 2);\n        } ],\n        mmm: [ \"\" ],\n        mmmm: [ \"\" ],\n        yy: [ \"[0-9]{2}\", Date.prototype.setFullYear, \"year\", function() {\n            return pad(Date.prototype.getFullYear.call(this), 2);\n        } ],\n        yyyy: [ \"[0-9]{4}\", Date.prototype.setFullYear, \"year\", function() {\n            return pad(Date.prototype.getFullYear.call(this), 4);\n        } ],\n        h: [ \"[1-9]|1[0-2]\", Date.prototype.setHours, \"hours\", Date.prototype.getHours ],\n        hh: [ \"0[1-9]|1[0-2]\", Date.prototype.setHours, \"hours\", function() {\n            return pad(Date.prototype.getHours.call(this), 2);\n        } ],\n        hhh: [ \"[0-9]+\", Date.prototype.setHours, \"hours\", Date.prototype.getHours ],\n        H: [ \"1?[0-9]|2[0-3]\", Date.prototype.setHours, \"hours\", Date.prototype.getHours ],\n        HH: [ \"[01][0-9]|2[0-3]\", Date.prototype.setHours, \"hours\", function() {\n            return pad(Date.prototype.getHours.call(this), 2);\n        } ],\n        HHH: [ \"[0-9]+\", Date.prototype.setHours, \"hours\", Date.prototype.getHours ],\n        M: [ \"[1-5]?[0-9]\", Date.prototype.setMinutes, \"minutes\", Date.prototype.getMinutes ],\n        MM: [ \"[0-5][0-9]\", Date.prototype.setMinutes, \"minutes\", function() {\n            return pad(Date.prototype.getMinutes.call(this), 2);\n        } ],\n        s: [ \"[1-5]?[0-9]\", Date.prototype.setSeconds, \"seconds\", Date.prototype.getSeconds ],\n        ss: [ \"[0-5][0-9]\", Date.prototype.setSeconds, \"seconds\", function() {\n            return pad(Date.prototype.getSeconds.call(this), 2);\n        } ],\n        l: [ \"[0-9]{3}\", Date.prototype.setMilliseconds, \"milliseconds\", function() {\n            return pad(Date.prototype.getMilliseconds.call(this), 3);\n        } ],\n        L: [ \"[0-9]{2}\", Date.prototype.setMilliseconds, \"milliseconds\", function() {\n            return pad(Date.prototype.getMilliseconds.call(this), 2);\n        } ],\n        t: [ \"[ap]\" ],\n        tt: [ \"[ap]m\" ],\n        T: [ \"[AP]\" ],\n        TT: [ \"[AP]M\" ],\n        Z: [ \"\" ],\n        o: [ \"\" ],\n        S: [ \"\" ]\n    }, formatAlias = {\n        isoDate: \"yyyy-mm-dd\",\n        isoTime: \"HH:MM:ss\",\n        isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n        isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n    };\n    function getTokenizer(opts) {\n        if (!opts.tokenizer) {\n            var tokens = [];\n            for (var ndx in formatCode) {\n                if (tokens.indexOf(ndx[0]) === -1) tokens.push(ndx[0]);\n            }\n            opts.tokenizer = \"(\" + tokens.join(\"+|\") + \")+?|.\";\n            opts.tokenizer = new RegExp(opts.tokenizer, \"g\");\n        }\n        return opts.tokenizer;\n    }\n    function isValidDate(dateParts, currentResult) {\n        return !isFinite(dateParts.rawday) || dateParts.day == \"29\" && !isFinite(dateParts.rawyear) || new Date(dateParts.date.getFullYear(), isFinite(dateParts.rawmonth) ? dateParts.month : dateParts.date.getMonth() + 1, 0).getDate() >= dateParts.day ? currentResult : false;\n    }\n    function isDateInRange(dateParts, opts) {\n        var result = true;\n        if (opts.min) {\n            if (dateParts[\"rawyear\"]) {\n                var rawYear = dateParts[\"rawyear\"].replace(/[^0-9]/g, \"\"), minYear = opts.min.year.substr(0, rawYear.length);\n                result = minYear <= rawYear;\n            }\n            if (dateParts[\"year\"] === dateParts[\"rawyear\"]) {\n                if (opts.min.date.getTime() === opts.min.date.getTime()) {\n                    result = opts.min.date.getTime() <= dateParts.date.getTime();\n                }\n            }\n        }\n        if (result && opts.max && opts.max.date.getTime() === opts.max.date.getTime()) {\n            result = opts.max.date.getTime() >= dateParts.date.getTime();\n        }\n        return result;\n    }\n    function parse(format, dateObjValue, opts, raw) {\n        var mask = \"\", match;\n        while (match = getTokenizer(opts).exec(format)) {\n            if (dateObjValue === undefined) {\n                if (formatCode[match[0]]) {\n                    mask += \"(\" + formatCode[match[0]][0] + \")\";\n                } else {\n                    switch (match[0]) {\n                      case \"[\":\n                        mask += \"(\";\n                        break;\n\n                      case \"]\":\n                        mask += \")?\";\n                        break;\n\n                      default:\n                        mask += Inputmask.escapeRegex(match[0]);\n                    }\n                }\n            } else {\n                if (formatCode[match[0]]) {\n                    if (raw !== true && formatCode[match[0]][3]) {\n                        var getFn = formatCode[match[0]][3];\n                        mask += getFn.call(dateObjValue.date);\n                    } else if (formatCode[match[0]][2]) mask += dateObjValue[\"raw\" + formatCode[match[0]][2]]; else mask += match[0];\n                } else mask += match[0];\n            }\n        }\n        return mask;\n    }\n    function pad(val, len) {\n        val = String(val);\n        len = len || 2;\n        while (val.length < len) val = \"0\" + val;\n        return val;\n    }\n    function analyseMask(maskString, format, opts) {\n        var dateObj = {\n            date: new Date(1, 0, 1)\n        }, targetProp, mask = maskString, match, dateOperation, targetValidator;\n        function extendProperty(value) {\n            var correctedValue;\n            if (opts.min && opts.min[targetProp] || opts.max && opts.max[targetProp]) {\n                var min = opts.min && opts.min[targetProp] || opts.max[targetProp], max = opts.max && opts.max[targetProp] || opts.min[targetProp];\n                correctedValue = value.replace(/[^0-9]/g, \"\");\n                correctedValue += (min.indexOf(correctedValue) < max.indexOf(correctedValue) ? max : min).toString().substr(correctedValue.length);\n                while (!new RegExp(targetValidator).test(correctedValue)) {\n                    correctedValue--;\n                }\n            } else correctedValue = value.replace(/[^0-9]/g, \"0\");\n            return correctedValue;\n        }\n        function setValue(dateObj, value, opts) {\n            dateObj[targetProp] = extendProperty(value);\n            dateObj[\"raw\" + targetProp] = value;\n            if (dateOperation !== undefined) dateOperation.call(dateObj.date, targetProp == \"month\" ? parseInt(dateObj[targetProp]) - 1 : dateObj[targetProp]);\n        }\n        if (typeof mask === \"string\") {\n            while (match = getTokenizer(opts).exec(format)) {\n                var value = mask.slice(0, match[0].length);\n                if (formatCode.hasOwnProperty(match[0])) {\n                    targetValidator = formatCode[match[0]][0];\n                    targetProp = formatCode[match[0]][2];\n                    dateOperation = formatCode[match[0]][1];\n                    setValue(dateObj, value, opts);\n                }\n                mask = mask.slice(value.length);\n            }\n            return dateObj;\n        } else if (mask && typeof mask === \"object\" && mask.hasOwnProperty(\"date\")) {\n            return mask;\n        }\n        return undefined;\n    }\n    Inputmask.extendAliases({\n        datetime: {\n            mask: function(opts) {\n                formatCode.S = opts.i18n.ordinalSuffix.join(\"|\");\n                opts.inputFormat = formatAlias[opts.inputFormat] || opts.inputFormat;\n                opts.displayFormat = formatAlias[opts.displayFormat] || opts.displayFormat || opts.inputFormat;\n                opts.outputFormat = formatAlias[opts.outputFormat] || opts.outputFormat || opts.inputFormat;\n                opts.placeholder = opts.placeholder !== \"\" ? opts.placeholder : opts.inputFormat.replace(/[\\[\\]]/, \"\");\n                opts.regex = parse(opts.inputFormat, undefined, opts);\n                return null;\n            },\n            placeholder: \"\",\n            inputFormat: \"isoDateTime\",\n            displayFormat: undefined,\n            outputFormat: undefined,\n            min: null,\n            max: null,\n            i18n: {\n                dayNames: [ \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" ],\n                monthNames: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n                ordinalSuffix: [ \"st\", \"nd\", \"rd\", \"th\" ]\n            },\n            postValidation: function(buffer, pos, currentResult, opts) {\n                opts.min = analyseMask(opts.min, opts.inputFormat, opts);\n                opts.max = analyseMask(opts.max, opts.inputFormat, opts);\n                var result = currentResult, dateParts = analyseMask(buffer.join(\"\"), opts.inputFormat, opts);\n                if (result && dateParts.date.getTime() === dateParts.date.getTime()) {\n                    result = isValidDate(dateParts, result);\n                    result = result && isDateInRange(dateParts, opts);\n                }\n                if (pos && result && currentResult.pos !== pos) {\n                    return {\n                        buffer: parse(opts.inputFormat, dateParts, opts),\n                        refreshFromBuffer: {\n                            start: pos,\n                            end: currentResult.pos\n                        }\n                    };\n                }\n                return result;\n            },\n            onKeyDown: function(e, buffer, caretPos, opts) {\n                var input = this;\n                if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {\n                    var today = new Date(), match, date = \"\";\n                    while (match = getTokenizer(opts).exec(opts.inputFormat)) {\n                        if (match[0].charAt(0) === \"d\") {\n                            date += pad(today.getDate(), match[0].length);\n                        } else if (match[0].charAt(0) === \"m\") {\n                            date += pad(today.getMonth() + 1, match[0].length);\n                        } else if (match[0] === \"yyyy\") {\n                            date += today.getFullYear().toString();\n                        } else if (match[0].charAt(0) === \"y\") {\n                            date += pad(today.getYear(), match[0].length);\n                        }\n                    }\n                    input.inputmask._valueSet(date);\n                    $(input).trigger(\"setvalue\");\n                }\n            },\n            onUnMask: function(maskedValue, unmaskedValue, opts) {\n                return parse(opts.outputFormat, analyseMask(maskedValue, opts.inputFormat, opts), opts, true);\n            },\n            casing: function(elem, test, pos, validPositions) {\n                if (test.nativeDef.indexOf(\"[ap]\") == 0) return elem.toLowerCase();\n                if (test.nativeDef.indexOf(\"[AP]\") == 0) return elem.toUpperCase();\n                return elem;\n            },\n            insertMode: false\n        }\n    });\n    return Inputmask;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* inputmask.numeric.extensions.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2018 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.2\n*/\n\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(0) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require(\"./inputmask\"));\n    } else {\n        factory(window.Inputmask);\n    }\n})(function(Inputmask) {\n    var $ = Inputmask.dependencyLib;\n    function autoEscape(txt, opts) {\n        var escapedTxt = \"\";\n        for (var i = 0; i < txt.length; i++) {\n            if (Inputmask.prototype.definitions[txt.charAt(i)] || opts.definitions[txt.charAt(i)] || opts.optionalmarker.start === txt.charAt(i) || opts.optionalmarker.end === txt.charAt(i) || opts.quantifiermarker.start === txt.charAt(i) || opts.quantifiermarker.end === txt.charAt(i) || opts.groupmarker.start === txt.charAt(i) || opts.groupmarker.end === txt.charAt(i) || opts.alternatormarker === txt.charAt(i)) {\n                escapedTxt += \"\\\\\" + txt.charAt(i);\n            } else escapedTxt += txt.charAt(i);\n        }\n        return escapedTxt;\n    }\n    function alignDigits(buffer, opts) {\n        if (opts.numericInput) {\n            var radixPosition = $.inArray(opts.radixPoint, buffer);\n            if (radixPosition === -1) {\n                buffer.push(opts.radixPoint);\n                radixPosition = buffer.length - 1;\n            }\n            for (var i = 1; i <= opts.digits; i++) {\n                buffer[radixPosition + i] = buffer[radixPosition + i] || \"0\";\n            }\n        }\n        return buffer;\n    }\n    Inputmask.extendAliases({\n        numeric: {\n            mask: function(opts) {\n                if (opts.repeat !== 0 && isNaN(opts.integerDigits)) {\n                    opts.integerDigits = opts.repeat;\n                }\n                opts.repeat = 0;\n                if (opts.groupSeparator === opts.radixPoint && opts.digits && opts.digits !== \"0\") {\n                    if (opts.radixPoint === \".\") {\n                        opts.groupSeparator = \",\";\n                    } else if (opts.radixPoint === \",\") {\n                        opts.groupSeparator = \".\";\n                    } else opts.groupSeparator = \"\";\n                }\n                if (opts.groupSeparator === \" \") {\n                    opts.skipOptionalPartCharacter = undefined;\n                }\n                opts.autoGroup = opts.autoGroup && opts.groupSeparator !== \"\";\n                if (opts.autoGroup) {\n                    if (typeof opts.groupSize == \"string\" && isFinite(opts.groupSize)) opts.groupSize = parseInt(opts.groupSize);\n                    if (isFinite(opts.integerDigits)) {\n                        var seps = Math.floor(opts.integerDigits / opts.groupSize);\n                        var mod = opts.integerDigits % opts.groupSize;\n                        opts.integerDigits = parseInt(opts.integerDigits) + (mod === 0 ? seps - 1 : seps);\n                        if (opts.integerDigits < 1) {\n                            opts.integerDigits = \"*\";\n                        }\n                    }\n                }\n                if (opts.placeholder.length > 1) {\n                    opts.placeholder = opts.placeholder.charAt(0);\n                }\n                if (opts.positionCaretOnClick === \"radixFocus\" && (opts.placeholder === \"\" && opts.integerOptional === false)) {\n                    opts.positionCaretOnClick = \"lvp\";\n                }\n                opts.definitions[\";\"] = opts.definitions[\"~\"];\n                opts.definitions[\";\"].definitionSymbol = \"~\";\n                if (opts.numericInput === true) {\n                    opts.positionCaretOnClick = opts.positionCaretOnClick === \"radixFocus\" ? \"lvp\" : opts.positionCaretOnClick;\n                    opts.digitsOptional = false;\n                    if (isNaN(opts.digits)) opts.digits = 2;\n                    opts.decimalProtect = false;\n                }\n                var mask = \"[+]\";\n                mask += autoEscape(opts.prefix, opts);\n                if (opts.integerOptional === true) {\n                    mask += \"~{1,\" + opts.integerDigits + \"}\";\n                } else mask += \"~{\" + opts.integerDigits + \"}\";\n                if (opts.digits !== undefined) {\n                    var radixDef = opts.decimalProtect ? \":\" : opts.radixPoint;\n                    var dq = opts.digits.toString().split(\",\");\n                    if (isFinite(dq[0]) && dq[1] && isFinite(dq[1])) {\n                        mask += radixDef + \";{\" + opts.digits + \"}\";\n                    } else if (isNaN(opts.digits) || parseInt(opts.digits) > 0) {\n                        if (opts.digitsOptional) {\n                            mask += \"[\" + radixDef + \";{1,\" + opts.digits + \"}]\";\n                        } else mask += radixDef + \";{\" + opts.digits + \"}\";\n                    }\n                }\n                mask += autoEscape(opts.suffix, opts);\n                mask += \"[-]\";\n                opts.greedy = false;\n                return mask;\n            },\n            placeholder: \"\",\n            greedy: false,\n            digits: \"*\",\n            digitsOptional: true,\n            enforceDigitsOnBlur: false,\n            radixPoint: \".\",\n            positionCaretOnClick: \"radixFocus\",\n            groupSize: 3,\n            groupSeparator: \"\",\n            autoGroup: false,\n            allowMinus: true,\n            negationSymbol: {\n                front: \"-\",\n                back: \"\"\n            },\n            integerDigits: \"+\",\n            integerOptional: true,\n            prefix: \"\",\n            suffix: \"\",\n            rightAlign: true,\n            decimalProtect: true,\n            min: null,\n            max: null,\n            step: 1,\n            insertMode: true,\n            autoUnmask: false,\n            unmaskAsNumber: false,\n            inputmode: \"numeric\",\n            preValidation: function(buffer, pos, c, isSelection, opts, maskset) {\n                if (c === \"-\" || c === opts.negationSymbol.front) {\n                    if (opts.allowMinus !== true) return false;\n                    opts.isNegative = opts.isNegative === undefined ? true : !opts.isNegative;\n                    if (buffer.join(\"\") === \"\") return true;\n                    return {\n                        caret: maskset.validPositions[pos] ? pos : undefined,\n                        dopost: true\n                    };\n                }\n                if (isSelection === false && c === opts.radixPoint && (opts.digits !== undefined && (isNaN(opts.digits) || parseInt(opts.digits) > 0))) {\n                    var radixPos = $.inArray(opts.radixPoint, buffer);\n                    if (radixPos !== -1 && maskset.validPositions[radixPos] !== undefined) {\n                        if (opts.numericInput === true) {\n                            return pos === radixPos;\n                        }\n                        return {\n                            caret: radixPos + 1\n                        };\n                    }\n                }\n                return true;\n            },\n            postValidation: function(buffer, pos, currentResult, opts) {\n                function buildPostMask(buffer, opts) {\n                    var postMask = \"\";\n                    postMask += \"(\" + opts.groupSeparator + \"*{\" + opts.groupSize + \"}){*}\";\n                    if (opts.radixPoint !== \"\") {\n                        var radixSplit = buffer.join(\"\").split(opts.radixPoint);\n                        if (radixSplit[1]) {\n                            postMask += opts.radixPoint + \"*{\" + radixSplit[1].match(/^\\d*\\??\\d*/)[0].length + \"}\";\n                        }\n                    }\n                    return postMask;\n                }\n                var suffix = opts.suffix.split(\"\"), prefix = opts.prefix.split(\"\");\n                if (currentResult.pos === undefined && currentResult.caret !== undefined && currentResult.dopost !== true) return currentResult;\n                var caretPos = currentResult.caret !== undefined ? currentResult.caret : currentResult.pos;\n                var maskedValue = buffer.slice();\n                if (opts.numericInput) {\n                    caretPos = maskedValue.length - caretPos - 1;\n                    maskedValue = maskedValue.reverse();\n                }\n                var charAtPos = maskedValue[caretPos];\n                if (charAtPos === opts.groupSeparator) {\n                    caretPos += 1;\n                    charAtPos = maskedValue[caretPos];\n                }\n                if (caretPos === maskedValue.length - opts.suffix.length - 1 && charAtPos === opts.radixPoint) return currentResult;\n                if (charAtPos !== undefined) {\n                    if (charAtPos !== opts.radixPoint && charAtPos !== opts.negationSymbol.front && charAtPos !== opts.negationSymbol.back) {\n                        maskedValue[caretPos] = \"?\";\n                        if (opts.prefix.length > 0 && caretPos >= (opts.isNegative === false ? 1 : 0) && caretPos < opts.prefix.length - 1 + (opts.isNegative === false ? 1 : 0)) {\n                            prefix[caretPos - (opts.isNegative === false ? 1 : 0)] = \"?\";\n                        } else if (opts.suffix.length > 0 && caretPos >= maskedValue.length - opts.suffix.length - (opts.isNegative === false ? 1 : 0)) {\n                            suffix[caretPos - (maskedValue.length - opts.suffix.length - (opts.isNegative === false ? 1 : 0))] = \"?\";\n                        }\n                    }\n                }\n                prefix = prefix.join(\"\");\n                suffix = suffix.join(\"\");\n                var processValue = maskedValue.join(\"\").replace(prefix, \"\");\n                processValue = processValue.replace(suffix, \"\");\n                processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\");\n                processValue = processValue.replace(new RegExp(\"[-\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"]\", \"g\"), \"\");\n                processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + \"$\"), \"\");\n                if (isNaN(opts.placeholder)) {\n                    processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.placeholder), \"g\"), \"\");\n                }\n                if (processValue.length > 1 && processValue.indexOf(opts.radixPoint) !== 1) {\n                    if (charAtPos === \"0\") {\n                        processValue = processValue.replace(/^\\?/g, \"\");\n                    }\n                    processValue = processValue.replace(/^0/g, \"\");\n                }\n                if (processValue.charAt(0) === opts.radixPoint && opts.radixPoint !== \"\" && opts.numericInput !== true) {\n                    processValue = \"0\" + processValue;\n                }\n                if (processValue !== \"\") {\n                    processValue = processValue.split(\"\");\n                    if ((!opts.digitsOptional || opts.enforceDigitsOnBlur && currentResult.event === \"blur\") && isFinite(opts.digits)) {\n                        var radixPosition = $.inArray(opts.radixPoint, processValue);\n                        var rpb = $.inArray(opts.radixPoint, maskedValue);\n                        if (radixPosition === -1) {\n                            processValue.push(opts.radixPoint);\n                            radixPosition = processValue.length - 1;\n                        }\n                        for (var i = 1; i <= opts.digits; i++) {\n                            if ((!opts.digitsOptional || opts.enforceDigitsOnBlur && currentResult.event === \"blur\") && (processValue[radixPosition + i] === undefined || processValue[radixPosition + i] === opts.placeholder.charAt(0))) {\n                                processValue[radixPosition + i] = currentResult.placeholder || opts.placeholder.charAt(0);\n                            } else if (rpb !== -1 && maskedValue[rpb + i] !== undefined) {\n                                processValue[radixPosition + i] = processValue[radixPosition + i] || maskedValue[rpb + i];\n                            }\n                        }\n                    }\n                    if (opts.autoGroup === true && opts.groupSeparator !== \"\" && (charAtPos !== opts.radixPoint || currentResult.pos !== undefined || currentResult.dopost)) {\n                        var addRadix = processValue[processValue.length - 1] === opts.radixPoint && currentResult.c === opts.radixPoint;\n                        processValue = Inputmask(buildPostMask(processValue, opts), {\n                            numericInput: true,\n                            jitMasking: true,\n                            definitions: {\n                                \"*\": {\n                                    validator: \"[0-9?]\",\n                                    cardinality: 1\n                                }\n                            }\n                        }).format(processValue.join(\"\"));\n                        if (addRadix) processValue += opts.radixPoint;\n                        if (processValue.charAt(0) === opts.groupSeparator) {\n                            processValue.substr(1);\n                        }\n                    } else processValue = processValue.join(\"\");\n                }\n                if (opts.isNegative && currentResult.event === \"blur\") {\n                    opts.isNegative = processValue !== \"0\";\n                }\n                processValue = prefix + processValue;\n                processValue += suffix;\n                if (opts.isNegative) {\n                    processValue = opts.negationSymbol.front + processValue;\n                    processValue += opts.negationSymbol.back;\n                }\n                processValue = processValue.split(\"\");\n                if (charAtPos !== undefined) {\n                    if (charAtPos !== opts.radixPoint && charAtPos !== opts.negationSymbol.front && charAtPos !== opts.negationSymbol.back) {\n                        caretPos = $.inArray(\"?\", processValue);\n                        if (caretPos > -1) {\n                            processValue[caretPos] = charAtPos;\n                        } else caretPos = currentResult.caret || 0;\n                    } else if (charAtPos === opts.radixPoint || charAtPos === opts.negationSymbol.front || charAtPos === opts.negationSymbol.back) {\n                        var newCaretPos = $.inArray(charAtPos, processValue);\n                        if (newCaretPos !== -1) caretPos = newCaretPos;\n                    }\n                }\n                if (opts.numericInput) {\n                    caretPos = processValue.length - caretPos - 1;\n                    processValue = processValue.reverse();\n                }\n                var rslt = {\n                    caret: (charAtPos === undefined || currentResult.pos !== undefined) && caretPos !== undefined ? caretPos + (opts.numericInput ? -1 : 1) : caretPos,\n                    buffer: processValue,\n                    refreshFromBuffer: currentResult.dopost || buffer.join(\"\") !== processValue.join(\"\")\n                };\n                return rslt.refreshFromBuffer ? rslt : currentResult;\n            },\n            onBeforeWrite: function(e, buffer, caretPos, opts) {\n                function parseMinMaxOptions(opts) {\n                    if (opts.parseMinMaxOptions === undefined) {\n                        if (opts.min !== null) {\n                            opts.min = opts.min.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\");\n                            if (opts.radixPoint === \",\") opts.min = opts.min.replace(opts.radixPoint, \".\");\n                            opts.min = isFinite(opts.min) ? parseFloat(opts.min) : NaN;\n                            if (isNaN(opts.min)) opts.min = Number.MIN_VALUE;\n                        }\n                        if (opts.max !== null) {\n                            opts.max = opts.max.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\");\n                            if (opts.radixPoint === \",\") opts.max = opts.max.replace(opts.radixPoint, \".\");\n                            opts.max = isFinite(opts.max) ? parseFloat(opts.max) : NaN;\n                            if (isNaN(opts.max)) opts.max = Number.MAX_VALUE;\n                        }\n                        opts.parseMinMaxOptions = \"done\";\n                    }\n                }\n                if (e) {\n                    switch (e.type) {\n                      case \"keydown\":\n                        return opts.postValidation(buffer, caretPos, {\n                            caret: caretPos,\n                            dopost: true\n                        }, opts);\n\n                      case \"blur\":\n                      case \"checkval\":\n                        var unmasked;\n                        parseMinMaxOptions(opts);\n                        if (opts.min !== null || opts.max !== null) {\n                            unmasked = opts.onUnMask(buffer.join(\"\"), undefined, $.extend({}, opts, {\n                                unmaskAsNumber: true\n                            }));\n                            if (opts.min !== null && unmasked < opts.min) {\n                                opts.isNegative = opts.min < 0;\n                                return opts.postValidation(opts.min.toString().replace(\".\", opts.radixPoint).split(\"\"), caretPos, {\n                                    caret: caretPos,\n                                    dopost: true,\n                                    placeholder: \"0\"\n                                }, opts);\n                            } else if (opts.max !== null && unmasked > opts.max) {\n                                opts.isNegative = opts.max < 0;\n                                return opts.postValidation(opts.max.toString().replace(\".\", opts.radixPoint).split(\"\"), caretPos, {\n                                    caret: caretPos,\n                                    dopost: true,\n                                    placeholder: \"0\"\n                                }, opts);\n                            }\n                        }\n                        return opts.postValidation(buffer, caretPos, {\n                            caret: caretPos,\n                            placeholder: \"0\",\n                            event: \"blur\"\n                        }, opts);\n\n                      case \"_checkval\":\n                        return {\n                            caret: caretPos\n                        };\n\n                      default:\n                        break;\n                    }\n                }\n            },\n            regex: {\n                integerPart: function(opts, emptyCheck) {\n                    return emptyCheck ? new RegExp(\"[\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"+]?\") : new RegExp(\"[\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"+]?\\\\d+\");\n                },\n                integerNPart: function(opts) {\n                    return new RegExp(\"[\\\\d\" + Inputmask.escapeRegex(opts.groupSeparator) + Inputmask.escapeRegex(opts.placeholder.charAt(0)) + \"]+\");\n                }\n            },\n            definitions: {\n                \"~\": {\n                    validator: function(chrs, maskset, pos, strict, opts, isSelection) {\n                        var isValid, l;\n                        if (chrs === \"k\" || chrs === \"m\") {\n                            isValid = {\n                                insert: [],\n                                c: 0\n                            };\n                            for (var i = 0, l = chrs === \"k\" ? 2 : 5; i < l; i++) {\n                                isValid.insert.push({\n                                    pos: pos + i,\n                                    c: 0\n                                });\n                            }\n                            isValid.pos = pos + l;\n                            return isValid;\n                        }\n                        isValid = strict ? new RegExp(\"[0-9\" + Inputmask.escapeRegex(opts.groupSeparator) + \"]\").test(chrs) : new RegExp(\"[0-9]\").test(chrs);\n                        if (isValid === true) {\n                            if (opts.numericInput !== true && maskset.validPositions[pos] !== undefined && maskset.validPositions[pos].match.def === \"~\" && !isSelection) {\n                                var processValue = maskset.buffer.join(\"\");\n                                processValue = processValue.replace(new RegExp(\"[-\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"]\", \"g\"), \"\");\n                                processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + \"$\"), \"\");\n                                var pvRadixSplit = processValue.split(opts.radixPoint);\n                                if (pvRadixSplit.length > 1) {\n                                    pvRadixSplit[1] = pvRadixSplit[1].replace(/0/g, opts.placeholder.charAt(0));\n                                }\n                                if (pvRadixSplit[0] === \"0\") {\n                                    pvRadixSplit[0] = pvRadixSplit[0].replace(/0/g, opts.placeholder.charAt(0));\n                                }\n                                processValue = pvRadixSplit[0] + opts.radixPoint + pvRadixSplit[1] || \"\";\n                                var bufferTemplate = maskset._buffer.join(\"\");\n                                if (processValue === opts.radixPoint) {\n                                    processValue = bufferTemplate;\n                                }\n                                while (processValue.match(Inputmask.escapeRegex(bufferTemplate) + \"$\") === null) {\n                                    bufferTemplate = bufferTemplate.slice(1);\n                                }\n                                processValue = processValue.replace(bufferTemplate, \"\");\n                                processValue = processValue.split(\"\");\n                                if (processValue[pos] === undefined) {\n                                    isValid = {\n                                        pos: pos,\n                                        remove: pos\n                                    };\n                                } else {\n                                    isValid = {\n                                        pos: pos\n                                    };\n                                }\n                            }\n                        } else if (!strict && chrs === opts.radixPoint && maskset.validPositions[pos - 1] === undefined) {\n                            isValid = {\n                                insert: {\n                                    pos: pos,\n                                    c: 0\n                                },\n                                pos: pos + 1\n                            };\n                        }\n                        return isValid;\n                    },\n                    cardinality: 1\n                },\n                \"+\": {\n                    validator: function(chrs, maskset, pos, strict, opts) {\n                        return opts.allowMinus && (chrs === \"-\" || chrs === opts.negationSymbol.front);\n                    },\n                    cardinality: 1,\n                    placeholder: \"\"\n                },\n                \"-\": {\n                    validator: function(chrs, maskset, pos, strict, opts) {\n                        return opts.allowMinus && chrs === opts.negationSymbol.back;\n                    },\n                    cardinality: 1,\n                    placeholder: \"\"\n                },\n                \":\": {\n                    validator: function(chrs, maskset, pos, strict, opts) {\n                        var radix = \"[\" + Inputmask.escapeRegex(opts.radixPoint) + \"]\";\n                        var isValid = new RegExp(radix).test(chrs);\n                        if (isValid && maskset.validPositions[pos] && maskset.validPositions[pos].match.placeholder === opts.radixPoint) {\n                            isValid = {\n                                caret: pos + 1\n                            };\n                        }\n                        return isValid;\n                    },\n                    cardinality: 1,\n                    placeholder: function(opts) {\n                        return opts.radixPoint;\n                    }\n                }\n            },\n            onUnMask: function(maskedValue, unmaskedValue, opts) {\n                if (unmaskedValue === \"\" && opts.nullable === true) {\n                    return unmaskedValue;\n                }\n                var processValue = maskedValue.replace(opts.prefix, \"\");\n                processValue = processValue.replace(opts.suffix, \"\");\n                processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\");\n                if (opts.placeholder.charAt(0) !== \"\") {\n                    processValue = processValue.replace(new RegExp(opts.placeholder.charAt(0), \"g\"), \"0\");\n                }\n                if (opts.unmaskAsNumber) {\n                    if (opts.radixPoint !== \"\" && processValue.indexOf(opts.radixPoint) !== -1) processValue = processValue.replace(Inputmask.escapeRegex.call(this, opts.radixPoint), \".\");\n                    processValue = processValue.replace(new RegExp(\"^\" + Inputmask.escapeRegex(opts.negationSymbol.front)), \"-\");\n                    processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + \"$\"), \"\");\n                    return Number(processValue);\n                }\n                return processValue;\n            },\n            isComplete: function(buffer, opts) {\n                var maskedValue = (opts.numericInput ? buffer.slice().reverse() : buffer).join(\"\");\n                maskedValue = maskedValue.replace(new RegExp(\"^\" + Inputmask.escapeRegex(opts.negationSymbol.front)), \"-\");\n                maskedValue = maskedValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + \"$\"), \"\");\n                maskedValue = maskedValue.replace(opts.prefix, \"\");\n                maskedValue = maskedValue.replace(opts.suffix, \"\");\n                maskedValue = maskedValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator) + \"([0-9]{3})\", \"g\"), \"$1\");\n                if (opts.radixPoint === \",\") maskedValue = maskedValue.replace(Inputmask.escapeRegex(opts.radixPoint), \".\");\n                return isFinite(maskedValue);\n            },\n            onBeforeMask: function(initialValue, opts) {\n                opts.isNegative = undefined;\n                if (typeof initialValue == \"number\" && opts.radixPoint !== \"\") {\n                    initialValue = initialValue.toString().replace(\".\", opts.radixPoint);\n                }\n                initialValue = initialValue.toString().charAt(initialValue.length - 1) === opts.radixPoint ? initialValue.toString().substr(0, initialValue.length - 1) : initialValue.toString();\n                if (opts.radixPoint !== \"\" && isFinite(initialValue)) {\n                    var vs = initialValue.split(\".\"), groupSize = opts.groupSeparator !== \"\" ? parseInt(opts.groupSize) : 0;\n                    if (vs.length === 2 && (vs[0].length > groupSize || vs[1].length > groupSize || vs[0].length <= groupSize && vs[1].length < groupSize)) {\n                        initialValue = initialValue.replace(\".\", opts.radixPoint);\n                    }\n                }\n                var kommaMatches = initialValue.match(/,/g);\n                var dotMatches = initialValue.match(/\\./g);\n                if (dotMatches && kommaMatches) {\n                    if (dotMatches.length > kommaMatches.length) {\n                        initialValue = initialValue.replace(/\\./g, \"\");\n                        initialValue = initialValue.replace(\",\", opts.radixPoint);\n                    } else if (kommaMatches.length > dotMatches.length) {\n                        initialValue = initialValue.replace(/,/g, \"\");\n                        initialValue = initialValue.replace(\".\", opts.radixPoint);\n                    } else {\n                        initialValue = initialValue.indexOf(\".\") < initialValue.indexOf(\",\") ? initialValue.replace(/\\./g, \"\") : initialValue.replace(/,/g, \"\");\n                    }\n                } else {\n                    initialValue = initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\");\n                }\n                if (opts.digits === 0) {\n                    if (initialValue.indexOf(\".\") !== -1) {\n                        initialValue = initialValue.substring(0, initialValue.indexOf(\".\"));\n                    } else if (initialValue.indexOf(\",\") !== -1) {\n                        initialValue = initialValue.substring(0, initialValue.indexOf(\",\"));\n                    }\n                }\n                if (opts.radixPoint !== \"\" && isFinite(opts.digits)) {\n                    if (initialValue.indexOf(opts.radixPoint) !== -1) {\n                        var valueParts = initialValue.split(opts.radixPoint), decPart = valueParts[1].match(new RegExp(\"\\\\d*\"))[0];\n                        if (parseInt(opts.digits) < decPart.toString().length) {\n                            var digitsFactor = Math.pow(10, parseInt(opts.digits));\n                            initialValue = initialValue.replace(Inputmask.escapeRegex(opts.radixPoint), \".\");\n                            initialValue = Math.round(parseFloat(initialValue) * digitsFactor) / digitsFactor;\n                            initialValue = initialValue.toString().replace(\".\", opts.radixPoint);\n                        }\n                    }\n                }\n                return alignDigits(initialValue.toString().split(\"\"), opts).join(\"\");\n            },\n            onKeyDown: function(e, buffer, caretPos, opts) {\n                var $input = $(this);\n                if (e.ctrlKey) {\n                    switch (e.keyCode) {\n                      case Inputmask.keyCode.UP:\n                        $input.val(parseFloat(this.inputmask.unmaskedvalue()) + parseInt(opts.step));\n                        $input.trigger(\"setvalue\");\n                        break;\n\n                      case Inputmask.keyCode.DOWN:\n                        $input.val(parseFloat(this.inputmask.unmaskedvalue()) - parseInt(opts.step));\n                        $input.trigger(\"setvalue\");\n                        break;\n                    }\n                }\n            }\n        },\n        currency: {\n            prefix: \"$ \",\n            groupSeparator: \",\",\n            alias: \"numeric\",\n            placeholder: \"0\",\n            autoGroup: true,\n            digits: 2,\n            digitsOptional: false,\n            clearMaskOnLostFocus: false\n        },\n        decimal: {\n            alias: \"numeric\"\n        },\n        integer: {\n            alias: \"numeric\",\n            digits: 0,\n            radixPoint: \"\"\n        },\n        percentage: {\n            alias: \"numeric\",\n            digits: 2,\n            digitsOptional: true,\n            radixPoint: \".\",\n            placeholder: \"0\",\n            autoGroup: false,\n            min: 0,\n            max: 100,\n            suffix: \" %\",\n            allowMinus: false\n        }\n    });\n    return Inputmask;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ })
/******/ ]);